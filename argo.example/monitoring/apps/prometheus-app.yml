apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: prometheus-app
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: monitoring
  source:
    chart: kube-prometheus-stack
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: 36.0.3
    helm:
      releaseName: prometheus

      skipCrds: true

      values: |
        alertmanager:
          enabled: false

        ## Using default values from https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
        ##
        grafana:
          enabled: true

          nodeSelector:
            topology.kubernetes.io/region: ch-sion

          image:
            repository: grafana/grafana-oss
            tag: 9.0.1

          persistence:
            type: pvc
            enabled: true
            storageClassName: grafana-nfs

          securityContext:
            runAsUser: 472
            runAsGroup: 472
            fsGroup: 472

          admin:
            existingSecret: "grafana-admin-secret"
            userKey: admin-user
            passwordKey: admin-password

          initChownData:
            enabled: false

          ingress:
            enabled: true
            ingressClassName: traefik

            annotations:
              cert-manager.io/cluster-issuer: selfsigned-cluster-issuer
              traefik.ingress.kubernetes.io/router.entrypoints: websecure
              traefik.ingress.kubernetes.io/router.tls: 'true'

            hosts:
              - grafana.example.com

            path: /

            tls:
              - secretName: grafana.example.com-secret
                hosts:
                  - grafana.example.com

        ## Component scraping the kube controller manager
        ##
        kubeControllerManager:
          enabled: false

        ## Component scraping coreDns. Use either this or kubeDns
        ##
        coreDns:
          enabled: false

        ## Component scraping kubeDns. Use either this or coreDns
        ##
        kubeDns:
          enabled: false

        ## Component scraping etcd
        ##
        kubeEtcd:
          enabled: false

        ## Component scraping kube scheduler
        ##
        kubeScheduler:
          enabled: false

        ## Component scraping kube proxy
        ##
        kubeProxy:
          enabled: false

        ## Component scraping kube state metrics
        ##
        kubeStateMetrics:
          enabled: true

        ## Configuration for kube-state-metrics subchart
        ##
        kube-state-metrics:
          prometheus:
            monitor:
              enabled: true

        ## Deploy node exporter as a daemonset to all nodes
        ##
        nodeExporter:
          enabled: true

        ## Configuration for prometheus-node-exporter subchart
        ##
        prometheus-node-exporter:
          prometheus:
            monitor:
              enabled: true

        ## Manages Prometheus and Alertmanager components
        ##
        prometheusOperator:
          enabled: true

          ## Resource limits & requests
          ##
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi

        ## Deploy a Prometheus instance
        ##
        prometheus:
          enabled: true

          ingress:
            enabled: true

            annotations:
              cert-manager.io/cluster-issuer: selfsigned-cluster-issuer
              traefik.ingress.kubernetes.io/router.entrypoints: websecure
              traefik.ingress.kubernetes.io/router.tls: 'true'

            hosts:
              - prometheus.example.com

            paths:
              - /

            tls:
              - secretName: prometheus.example.com-secret
                hosts:
                  - prometheus.example.com

          prometheusSpec:
            ruleSelectorNilUsesHelmValues: false
            serviceMonitorSelectorNilUsesHelmValues: false
            podMonitorSelectorNilUsesHelmValues: false
            probeSelectorNilUsesHelmValues: false

            nodeSelector:
              topology.kubernetes.io/region: ch-sion

            resources:
              limits:
                cpu: 1
                memory: 2Gi
              requests:
                cpu: 200m
                memory: 2Gi

            storageSpec:
              volumeClaimTemplate:
                spec:
                  storageClassName: 'prometheus-nfs'
                  accessModes: ['ReadWriteOnce']
                  resources:
                    requests:
                      storage: 50Gi

  destination:
    server: 'https://kubernetes.default.svc'
    namespace: monitoring

  syncPolicy:
    automated:
      prune: true # Specifies if resources should be pruned during auto-syncing ( false by default ).
      selfHeal: true # Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected ( false by default ).
      allowEmpty: false # Allows deleting all application resources during automatic syncing ( false by default ).
    syncOptions: []
    retry:
      limit: 5 # number of failed sync attempt retries; unlimited number of attempts if less than 0
      backoff:
        duration: 5s # the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        factor: 2 # a factor to multiply the base duration after each failed retry
        maxDuration: 3m # the maximum amount of time allowed for the backoff strategy
