url --url="https://dl.rockylinux.org/pub/rocky/9.0/BaseOS/x86_64/os/"
# License agreement
eula --agreed
# Disable Initial Setup on first boot
firstboot --disable
# Poweroff after the install is finished
poweroff
# Firewall
firewall --disable
# Disable Initial Setup on first boot
firstboot --disable
ignoredisk --only-use=vda
# Use SSSD
authselect select sssd with-mkhomedir with-sudo
# System language
lang en_US.UTF-8
# Keyboard layout
keyboard us
# Network information
network --bootproto=dhcp --device=eth0
# SELinux configuration
selinux --disabled
# System timezone
timezone UTC --utc
# System bootloader configuration
bootloader --location=mbr --driveorder="vda" --timeout=1
# Root password
rootpw --plaintext an_example_of_default_password
# System services
services --enabled="chronyd"

repo --name="AppStream" --baseurl=https://dl.rockylinux.org/pub/rocky/9.0/AppStream/x86_64/os/
repo --name="Extras" --baseurl=https://dl.rockylinux.org/pub/rocky/9.0/extras/x86_64/os/
repo --name="CRB" --baseurl=https://dl.rockylinux.org/pub/rocky/9.0/CRB/x86_64/os/
repo --name="epel" --baseurl=https://mirror.init7.net/fedora/epel/9/Everything/x86_64/
repo --name="deepsquare" --baseurl=https://yum.deepsquare.run/9/
repo --name="beegfs" --baseurl=https://www.beegfs.io/release/beegfs_7.3.1/dists/rhel9/
repo --name="cuda" --baseurl=https://developer.download.nvidia.com/compute/cuda/repos/rhel9/x86_64/
repo --name="libnvidia-container" --baseurl=https://nvidia.github.io/libnvidia-container/stable/rhel9.0/x86_64/
repo --name="cvmfs" --baseurl=https://cvmrepo.web.cern.ch/cvmrepo/yum/cvmfs/EL/9/x86_64/
repo --name="turbovnc" --baseurl=https://sourceforge.net/projects/turbovnc/files/
repo --name="virtualgl" --baseurl=https://sourceforge.net/projects/virtualgl/files

# Clear the Master Boot Record
zerombr
# Remove partitions
clearpart --all --initlabel
# Automatically create partition
part / --size=1 --grow --asprimary --fstype=xfs

# Postinstall
%post --erroronfail
set -ex
mkdir /opt/xcat

# Add repos permanently
dnf config-manager --add-repo https://yum.deepsquare.run/yum.repo
dnf config-manager --add-repo https://www.beegfs.io/release/beegfs_7.3.1/dists/beegfs-rhel9.repo

# Install xCat provisioning service
curl -fsSL "https://raw.githubusercontent.com/xcat2/xcat-core/master/xCAT/postscripts/xcatpostinit1.netboot" -o /opt/xcat/xcatpostinit1
chmod 755 /opt/xcat/xcatpostinit1

curl -fsSL "https://raw.githubusercontent.com/xcat2/xcat-core/master/xCAT/postscripts/xcatpostinit1.service" -o /etc/systemd/system/xcatpostinit1.service
ln -s "../xcatpostinit1.service" "/etc/systemd/system/multi-user.target.wants/xcatpostinit1.service"

# Postinstall
#-- No autofs
systemctl disable autofs

#-- Pam mkhomedir: auto create home folder for ldap users
sed -Ei 's|UMASK\t+[0-9]+|UMASK\t\t027|g' /etc/login.defs

#-- Mellanox install
rpm -e --nodeps --allmatches libibverbs
curl -fsSL https://yum.deepsquare.run/MLNX/MLNX_OFED_LINUX-5.7-1.0.2.0-rhel9.0-x86_64-ext.tgz | tar -xzf - -C /tmp
/tmp/MLNX_OFED_LINUX-5.7-1.0.2.0-rhel9.0-x86_64-ext/mlnxofedinstall --kernel 5.14.0-70.22.1.el9_0.x86_64 --distro RHEL9.0 --skip-repo --without-fw-update --force
sync
killall sharpd || true
rm -rf /tmp/MLNX_OFED_LINUX-5.7-1.0.2.0-rhel9.0-x86_64-ext
dracut -f --kver 5.14.0-70.22.1.el9_0.x86_64

# BeeOND install
dnf install -y beeond libbeegfs-ib
sed -i 's|buildArgs=-j8|buildArgs=-j8 BEEGFS_OPENTK_IBVERBS=1 OFED_INCLUDE_PATH=/usr/src/ofa_kernel/default/include KSRCDIR=/usr/src/kernels/5.14.0-70.22.1.el9_0.x86_64 KRELEASE=5.14.0-70.22.1.el9_0.x86_64|g' /etc/beegfs/beegfs-client-autobuild.conf
/etc/init.d/beegfs-client rebuild

#-- Install websockify
WEBSOCKIFY_VERSION=0.10.0
curl -fsSL https://github.com/novnc/websockify/archive/refs/tags/v${WEBSOCKIFY_VERSION}.tar.gz | tar -xz -C /opt/
cd /opt/websockify-${WEBSOCKIFY_VERSION}/
pip3 install .
pip3 install numpy
cd ..
rm -rf /opt/websockify-${WEBSOCKIFY_VERSION}/

#-- Install s4cmd
pip3 install s4cmd

#-- Secure umask for newly users
echo 'umask 0027' >>/etc/profile

# Kickstart copies install boot options. Serial is turned on for logging with
# Packer which disables console output. Disable it so console output is shown
# during deployments
sed -i 's/^GRUB_TERMINAL=.*/GRUB_TERMINAL_OUTPUT="console"/g' /etc/default/grub
sed -i '/GRUB_SERIAL_COMMAND="serial"/d' /etc/default/grub
sed -ri 's/(GRUB_CMDLINE_LINUX=".*)\s+console=ttyS0(.*")/\1\2/' /etc/default/grub

# Clean up install config not applicable to deployed environments.
for f in resolv.conf fstab; do
    rm -f /etc/$f
    touch /etc/$f
    chown root:root /etc/$f
    chmod 644 /etc/$f
done

cat <<EOF >>/etc/fstab
devpts  /dev/pts devpts   gid=5,mode=620 0 0
tmpfs   /dev/shm tmpfs    defaults       0 0
proc    /proc    proc     defaults       0 0
sysfs   /sys     sysfs    defaults       0 0
EOF

rm -f /etc/sysconfig/network-scripts/ifcfg-[^lo]*

dnf clean all
%end

%packages --excludedocs
@minimal-environment
chrony

# kernel
kernel-5.14.0-70.22.1.el9_0.x86_64
kernel-devel-5.14.0-70.22.1.el9_0.x86_64
kernel-headers-5.14.0-70.22.1.el9_0.x86_64
kernel-tools-5.14.0-70.22.1.el9_0.x86_64
kernel-modules-5.14.0-70.22.1.el9_0.x86_64
kernel-core-5.14.0-70.22.1.el9_0.x86_64
kernel-modules-extra-5.14.0-70.22.1.el9_0.x86_64

bash-completion
cloud-init
# cloud-init only requires python3-oauthlib with MAAS. As such upstream
# removed this dependency.
python3-oauthlib
rsync
tar
# grub2-efi-x64 ships grub signed for UEFI secure boot. If grub2-efi-x64-modules
# is installed grub will be generated on deployment and unsigned which breaks
# UEFI secure boot.
grub2-efi-x64
efibootmgr
shim-x64
dosfstools
lvm2
mdadm
device-mapper-multipath
iscsi-initiator-utils

dnf-plugins-core

# csquare packages
net-tools
nfs-utils
openssh-server
rsync
tar
util-linux
wget
python3
tar
bzip2
bc
dracut
dracut-network
rsyslog
hostname
e2fsprogs
ethtool
parted
openssl
dhclient
openssh-clients
bash
vim-minimal
perl
rpm
iputils
libtool
perl-interpreter
gawk
xz
squashfs-tools
cpio
sudo
make
bash-completion
nano
pciutils
git
mlocate
sssd
vim-enhanced
systemd-udev
numactl
munge
libevent-devel
tmux
oddjob
oddjob-mkhomedir
redis
unzip
nmap
flex
tk
bison
libgfortran
tcl
gcc-gfortran
libcurl
libnl3-devel
python3
numactl-libs
xfsprogs
keepalived
zsh
#pkgconf-pkg-config
rpm-build
hwloc
hwloc-libs
hwloc-devel
tcsh
ksh
xorg-x11-fonts-ISO8859-1-75dpi.noarch
xorg-x11-fonts-cyrillic.noarch

# otherpkgs
pdsh
stress
screen
s3cmd
htop
@Xfce
pmix4
slurm
slurm-contribs
slurm-libpmi
slurm-pam_slurm
slurm-slurmd
slurm-slurmrestd
@nvidia-driver:latest-dkms/ks
libnvidia-container1
libnvidia-container-tools
cvmfs
enroot-hardened
enroot-hardened+caps
nvslurm-plugin-pyxis
spank-report
apptainer
turbovnc-2.2.7-20211221.x86_64
VirtualGL

-plymouth
# Remove Intel wireless firmware
-i*-firmware
%end
