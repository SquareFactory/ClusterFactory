"use strict";(self.webpackChunkcluster_factory_ce_docs=self.webpackChunkcluster_factory_ce_docs||[]).push([[9101],{9613:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(9496);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),d=l,g=p["".concat(i,".").concat(d)]||p[d]||m[d]||r;return n?a.createElement(g,s(s({ref:t},c),{},{components:n})):a.createElement(g,s({ref:t},c))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,s=new Array(r);s[0]=p;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:l,s[1]=o;for(var u=2;u<r;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8046:function(e,t,n){n.d(t,{Z:function(){return s}});var a=n(9496),l=n(6398),r="tabItem_V9uK";function s(e){var t=e.children,n=e.hidden,s=e.className;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,s),hidden:n},t)}},8508:function(e,t,n){n.d(t,{Z:function(){return d}});var a=n(5443),l=n(9496),r=n(6398),s=n(1773),o=n(7296),i=n(123),u=n(9881),c="tabList_BPXy",m="tabItem_MmxT";function p(e){var t,n,s=e.lazy,p=e.block,d=e.defaultValue,g=e.values,h=e.groupId,y=e.className,k=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=g?g:k.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,o.l)(f,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===d?d:null!=(t=null!=d?d:null==(n=k.find((function(e){return e.props.default})))?void 0:n.props.value)?t:k[0].props.value;if(null!==b&&!f.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,i.U)(),C=N.tabGroupChoices,S=N.setTabGroupChoices,E=(0,l.useState)(b),L=E[0],w=E[1],x=[],_=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var P=C[h];null!=P&&P!==L&&f.some((function(e){return e.value===P}))&&w(P)}var M=function(e){var t=e.currentTarget,n=x.indexOf(t),a=f[n].value;a!==L&&(_(t),w(a),null!=h&&S(h,String(a)))},I=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,l=x.indexOf(e.currentTarget)+1;n=null!=(a=x[l])?a:x[0];break;case"ArrowLeft":var r,s=x.indexOf(e.currentTarget)-1;n=null!=(r=x[s])?r:x[x.length-1]}null==(t=n)||t.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",c)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":p},y)},f.map((function(e){var t=e.value,n=e.label,s=e.attributes;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:L===t?0:-1,"aria-selected":L===t,key:t,ref:function(e){return x.push(e)},onKeyDown:I,onFocus:M,onClick:M},s,{className:(0,r.Z)("tabs__item",m,null==s?void 0:s.className,{"tabs__item--active":L===t})}),null!=n?n:t)}))),s?(0,l.cloneElement)(k.filter((function(e){return e.props.value===L}))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},k.map((function(e,t){return(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==L})}))))}function d(e){var t=(0,s.Z)();return l.createElement(p,(0,a.Z)({key:String(t)},e))}},7950:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return u},metadata:function(){return m},toc:function(){return d}});var a=n(5443),l=n(3010),r=(n(9496),n(9613)),s=n(8508),o=n(8046),i=["components"],u={},c="Deploying SLURM Cluster",m={unversionedId:"guides/slurm/deploy-slurm",id:"guides/slurm/deploy-slurm",title:"Deploying SLURM Cluster",description:"image-20220512151655613",source:"@site/docs/guides/60-slurm/01-deploy-slurm.mdx",sourceDirName:"guides/60-slurm",slug:"/guides/slurm/deploy-slurm",permalink:"/docs/guides/slurm/deploy-slurm",draft:!1,editUrl:"https://github.com/SquareFactory/ClusterFactory-CE/tree/main/web/docs/guides/60-slurm/01-deploy-slurm.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"docs",previous:{title:"GitOps with xCAT",permalink:"/docs/guides/provisioning/gitops-with-xcat"},next:{title:"Deploy Open OnDemand",permalink:"/docs/guides/slurm/deploy-ondemand"}},p={},d=[{value:"Helm and Docker resources",id:"helm-and-docker-resources",level:2},{value:"Preparation",id:"preparation",level:2},{value:"LDAP deployment",id:"ldap-deployment",level:3},{value:"SSSD configuration",id:"sssd-configuration",level:3},{value:"MySQL deployment",id:"mysql-deployment",level:3},{value:"JWT Key generation",id:"jwt-key-generation",level:3},{value:"MUNGE Key generation",id:"munge-key-generation",level:3},{value:"1. Namespace and AppProject",id:"1-namespace-and-appproject",level:2},{value:"2. Begin writing the <code>slurm-cluster-&lt;cluster name&gt;-app.yml</code>",id:"2-begin-writing-the-slurm-cluster-cluster-name-appyml",level:2},{value:"2.a. Argo CD Application configuration",id:"2a-argo-cd-application-configuration",level:3},{value:"2.b. Values: Configuring the SLURM cluster",id:"2b-values-configuring-the-slurm-cluster",level:3},{value:"3. Slurm DB Deployment",id:"3-slurm-db-deployment",level:2},{value:"3.a. Secrets",id:"3a-secrets",level:3},{value:"3.b. Values: Enable SLURM DB",id:"3b-values-enable-slurm-db",level:3},{value:"4. Slurm Controller Deployment",id:"4-slurm-controller-deployment",level:2},{value:"4.a. Volumes",id:"4a-volumes",level:3},{value:"4.b. Values: Enable SLURM Controller",id:"4b-values-enable-slurm-controller",level:3},{value:"4.c Testing: <code>sinfo</code> from the controller node",id:"4c-testing-sinfo-from-the-controller-node",level:3},{value:"5. Slurm Compute Bare-Metal Deployment",id:"5-slurm-compute-bare-metal-deployment",level:2},{value:"5.a. Build an OS Image with Slurm",id:"5a-build-an-os-image-with-slurm",level:3},{value:"5.b. xCAT Postbootscripts",id:"5b-xcat-postbootscripts",level:3},{value:"5.c. Reboot the nodes",id:"5c-reboot-the-nodes",level:3},{value:"6. Slurm Login Deployment",id:"6-slurm-login-deployment",level:2},{value:"6.a. Secrets and Volumes",id:"6a-secrets-and-volumes",level:3},{value:"SSH Server configuration",id:"ssh-server-configuration",level:4},{value:"Home directory for the LDAP users",id:"home-directory-for-the-ldap-users",level:4},{value:"6.b. Values: Enable SLURM Login",id:"6b-values-enable-slurm-login",level:3},{value:"6.c Testing: Access to a SLURM Login node",id:"6c-testing-access-to-a-slurm-login-node",level:3}],g={toc:d};function h(e){var t=e.components,u=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},g,u,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"deploying-slurm-cluster"},"Deploying SLURM Cluster"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image-20220512151655613",src:n(6725).Z,width:"1065",height:"540"})),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Deploying the SLURM database isn't stable yet. Please feel free to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SquareFactory/ClusterFactory-CE/issues/new"},"create an issue")," so we can improve its stability."))),(0,r.kt)("h2",{id:"helm-and-docker-resources"},"Helm and Docker resources"),(0,r.kt)("p",null,"The Helm resources are stored on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SquareFactory/ClusterFactory-CE/tree/main/helm/slurm-cluster"},"the ClusterFactory CE Git Repository"),"."),(0,r.kt)("p",null,"The Dockerfile is described in the git repository ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SquareFactory/slurm-docker"},"SquareFactory/slurm-docker"),"."),(0,r.kt)("p",null,"The Docker images can be pulled with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"docker pull ghcr.io/squarefactory/slurm:latest-controller\ndocker pull ghcr.io/squarefactory/slurm:latest-login\ndocker pull ghcr.io/squarefactory/slurm:latest-db\ndocker pull ghcr.io/squarefactory/slurm:latest-rest\n")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You should always verify the default Helm ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SquareFactory/ClusterFactory-CE/blob/main/helm/slurm-cluster/values.yaml"},"values")," before editing the ",(0,r.kt)("inlineCode",{parentName:"p"},"values")," field of an Argo CD ",(0,r.kt)("inlineCode",{parentName:"p"},"Application"),"."))),(0,r.kt)("h2",{id:"preparation"},"Preparation"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Compared to the other guides we will start from scratch.")),(0,r.kt)("p",null,"Delete the ",(0,r.kt)("inlineCode",{parentName:"p"},"argo/slurm-cluster")," directory (or rename it)."),(0,r.kt)("p",null,"Deploying a SLURM cluster isn't easy and you MUST have these components ready:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A LDAP server and a SSSD configuration, to synchronize the user ID across the cluster"),(0,r.kt)("li",{parentName:"ul"},"A MySQL server for the SLURM DB"),(0,r.kt)("li",{parentName:"ul"},"A JWT private key, for the authentication via REST API"),(0,r.kt)("li",{parentName:"ul"},"A MUNGE key, for the authentication of SLURM daemons")),(0,r.kt)("h3",{id:"ldap-deployment"},"LDAP deployment"),(0,r.kt)("p",null,"Follow ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/deploy-ldap"},"the guide"),"."),(0,r.kt)("h3",{id:"sssd-configuration"},"SSSD configuration"),(0,r.kt)("p",null,"Let's store it in a ",(0,r.kt)("inlineCode",{parentName:"p"},"Secret"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create the ",(0,r.kt)("inlineCode",{parentName:"li"},"argo/slurm-cluster/secrets/")," directory and create a ",(0,r.kt)("inlineCode",{parentName:"li"},"-secret.yml.local")," file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="argo/slurm-cluster/secrets/sssd-secret.yaml.local"',title:'"argo/slurm-cluster/secrets/sssd-secret.yaml.local"'},'apiVersion: v1\nkind: Secret\nmetadata:\n  name: sssd-secret\n  namespace: slurm-cluster\ntype: Opaque\nstringData:\n  jwt_hs256.key: |\n  sssd.conf: |\n    # https://sssd.io/docs/users/troubleshooting/how-to-troubleshoot-backend.html\n    [sssd]\n    services = nss,pam,sudo,ssh\n    config_file_version = 2\n    domains = ldap\n\n    [sudo]\n\n    [nss]\n\n    [pam]\n    offline_credentials_expiration = 60\n\n    [domain/ldap]\n    #debug_level = 0x3ff0   <= perfect for debugging\n\n    id_provider = ldap\n    access_provider = ldap\n    cache_credentials = True\n\n    ldap_uri = <LDAP/LDAPS uri>\n    ldap_default_bind_dn = <FILL ME: bind DN>\n    ldap_default_authtok = <FILL ME: bind password>\n    ldap_search_timeout = 50\n    ldap_network_timeout = 60\n\n    ldap_search_base = ou=People,dc=example,dc=com\n    ldap_group_search_base = ou=Group,dc=example,dc=com\n    ldap_sudo_search_base = ou=SUDOers,dc=example,dc=com\n    ldap_user_extra_attrs = publicSSHKey\n    ldap_user_ssh_public_key = publicSSHKey\n\n    ldap_access_order = filter\n    ldap_access_filter = (objectClass=posixAccount)\n\n    ldap_tls_cipher_suite = HIGH\n    # On Ubuntu, the LDAP client is linked to GnuTLS instead of OpenSSL => cipher suite names are different\n    # In fact, it\'s not even a cipher suite name that goes here, but a so called "priority list" => see $> gnutls-cli --priority-list\n    # See https://backreference.org/2009/11/18/openssl-vs-gnutls-cipher-names/ , gnutls-cli is part of package gnutls-bin\n')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Seal the secret:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local:/ClusterFactory-CE"',title:'"user@local:/ClusterFactory-CE"'},"cfctl kubeseal\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Apply the SealedSecret:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local:/ClusterFactory-CE"',title:'"user@local:/ClusterFactory-CE"'},"kubectl apply -f argo/slurm-cluster/secrets/sssd-sealed-secret.yaml\n")),(0,r.kt)("h3",{id:"mysql-deployment"},"MySQL deployment"),(0,r.kt)("p",null,"You can deploy MySQL using the ",(0,r.kt)("a",{parentName:"p",href:"https://bitnami.com/stack/mysql/helm"},"Helm Chart of Bitnami")," and develop an ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/develop-apps-for-cluster-factory"},"Argo CD app"),"."),(0,r.kt)("h3",{id:"jwt-key-generation"},"JWT Key generation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local"',title:'"user@local"'},"ssh-keygen -t rsa -b 4096 -m PEM -f jwtRS256.key\n")),(0,r.kt)("p",null,"Let's store it in a ",(0,r.kt)("inlineCode",{parentName:"p"},"Secret"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a ",(0,r.kt)("inlineCode",{parentName:"li"},"-secret.yml.local")," file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="argo/slurm-cluster/secrets/slurm-secret.yaml.local"',title:'"argo/slurm-cluster/secrets/slurm-secret.yaml.local"'},"apiVersion: v1\nkind: Secret\nmetadata:\n  name: slurm-secret\n  namespace: slurm-cluster\ntype: Opaque\nstringData:\n  jwt_hs256.key: |\n    -----BEGIN RSA PRIVATE KEY-----\n    ...\n    -----END RSA PRIVATE KEY-----\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Seal the secret:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local:/ClusterFactory-CE"',title:'"user@local:/ClusterFactory-CE"'},"cfctl kubeseal\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Apply the SealedSecret:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local:/ClusterFactory-CE"',title:'"user@local:/ClusterFactory-CE"'},"kubectl apply -f argo/slurm-cluster/secrets/slurm-sealed-secret.yaml\n")),(0,r.kt)("h3",{id:"munge-key-generation"},"MUNGE Key generation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="root@local"',title:'"root@local"'},"# As root\ndnf install -y munge\n/usr/sbin/create-munge-key\ncat /etc/munge/munge.key | base64\n")),(0,r.kt)("p",null,"Let's store it in a ",(0,r.kt)("inlineCode",{parentName:"p"},"Secret"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a ",(0,r.kt)("inlineCode",{parentName:"li"},"-secret.yml.local")," file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="argo/slurm-cluster/secrets/munge-secret.yml.local"',title:'"argo/slurm-cluster/secrets/munge-secret.yml.local"'},"apiVersion: v1\nkind: Secret\nmetadata:\n  name: munge-secret\n  namespace: slurm-cluster\ntype: Opaque\ndata:\n  munge.key: |\n    <base 64 encoded key>\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Seal the secret:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local:/ClusterFactory-CE"',title:'"user@local:/ClusterFactory-CE"'},"cfctl kubeseal\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Apply the SealedSecret:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local:/ClusterFactory-CE"',title:'"user@local:/ClusterFactory-CE"'},"kubectl apply -f argo/cvmfs/secrets/munge-sealed-secret.yml\n")),(0,r.kt)("h2",{id:"1-namespace-and-appproject"},"1. Namespace and AppProject"),(0,r.kt)("p",null,"Create and apply the ",(0,r.kt)("inlineCode",{parentName:"p"},"Namespace")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"AppProject"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="argo/slurm-cluster/namespace.yml"',title:'"argo/slurm-cluster/namespace.yml"'},"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: slurm-cluster\n  labels:\n    app.kubernetes.io/name: slurm-cluster\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="argo/slurm-cluster/app-project.yml"',title:'"argo/slurm-cluster/app-project.yml"'},"apiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: slurm-cluster\n  namespace: argocd\n  # Finalizer that ensures that project is not deleted until it is not referenced by any application\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  description: Slurm cluster\n  # Allow manifests to deploy from any Git repos\n  sourceRepos:\n    - '*'\n  # Only permit applications to deploy to the namespace in the same cluster\n  destinations:\n    - namespace: slurm-cluster\n      server: https://kubernetes.default.svc\n\n  namespaceResourceWhitelist:\n    - kind: '*'\n      group: '*'\n\n  clusterResourceWhitelist:\n    - kind: '*'\n      group: '*'\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local:/ClusterFactory-CE"',title:'"user@local:/ClusterFactory-CE"'},"kubectl apply -f argo/slurm-cluster/\n")),(0,r.kt)("h2",{id:"2-begin-writing-the-slurm-cluster-cluster-name-appyml"},"2. Begin writing the ",(0,r.kt)("inlineCode",{parentName:"h2"},"slurm-cluster-<cluster name>-app.yml")),(0,r.kt)("h3",{id:"2a-argo-cd-application-configuration"},"2.a. Argo CD Application configuration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="argo/slurm-cluster/apps/slurm-cluster-<cluster name>-app.yml"',title:'"argo/slurm-cluster/apps/slurm-cluster-<cluster','name>-app.yml"':!0},'apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: slurm-cluster-<FILL ME: cluster name>-app\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  project: slurm-cluster\n  source:\n   # You should have forked this repo. Change the URL to your fork.\n    repoURL: git@github.com:<FILL ME: your account>/ClusterFactory-CE.git\n    targetRevision: HEAD\n    path: helm/slurm-cluster\n    helm:\n      releaseName: slurm-cluster-<FILL ME: cluster name>\n\n      valueFiles:\n        - values-<FILL ME: cluster name>.yaml\n\n  destination:\n    server: \'https://kubernetes.default.svc\'\n    namespace: slurm-cluster\n\n  syncPolicy:\n    automated:\n      prune: true # Specifies if resources should be pruned during auto-syncing ( false by default ).\n      selfHeal: true # Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected ( false by default ).\n      allowEmpty: false # Allows deleting all application resources during automatic syncing ( false by default ).\n    syncOptions: []\n    retry:\n      limit: 5 # number of failed sync attempt retries; unlimited number of attempts if less than 0\n      backoff:\n        duration: 5s # the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")\n        factor: 2 # a factor to multiply the base duration after each failed retry\n        maxDuration: 3m # the maximum amount of time allowed for the backoff strategy\n')),(0,r.kt)("h3",{id:"2b-values-configuring-the-slurm-cluster"},"2.b. Values: Configuring the SLURM cluster"),(0,r.kt)("p",null,"Add:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="helm/slurm-cluster/values-<cluster name>.yaml"',title:'"helm/slurm-cluster/values-<cluster','name>.yaml"':!0},'sssd:\n  secretName: sssd-secret\n\nmunge:\n  secretName: munge-secret\n\njwt:\n  secretName: slurm-secret\n\nslurmConfig:\n  clusterName: <FILL ME: cluster-name>\n\n  compute:\n    srunPortRangeStart: 60001\n    srunPortRangeEnd: 63000\n    debug: debug5\n\n  accounting: |\n    AccountingStorageType=accounting_storage/slurmdbd\n    AccountingStorageHost=slurm-cluster-<FILL ME: cluster name>.slurm-cluster.svc.cluster.local\n    AccountingStoragePort=6819\n    AccountingStorageTRES=gres/gpu\n\n  controller:\n    parameters: enable_configless\n    debug: debug5\n\n  defaultResourcesAllocation: |\n    # Change accordingly\n    DefCpuPerGPU=4\n    DefMemPerCpu=7000\n\n  nodes: |\n    # Change accordingly\n    NodeName=cn[1-12]  CPUs=32 Boards=1 SocketsPerBoard=1 CoresPerSocket=16 ThreadsPerCore=2 RealMemory=128473 Gres=gpu:4\n\n  partitions: |\n    # Change accordingly\n    PartitionName=main Nodes=cn[1-12] Default=YES MaxTime=INFINITE State=UP OverSubscribe=NO TRESBillingWeights="CPU=2.6,Mem=0.25G,GRES/gpu=24.0"\n\n  gres: |\n    # Change accordingly\n    NodeName=cn[1-12] File=/dev/nvidia[0-3] AutoDetect=nvml\n\n  # Extra slurm.conf configuration\n  extra: |\n    LaunchParameters=enable_nss_slurm\n    DebugFlags=Script,Gang,SelectType\n    TCPTimeout=5\n\n    # MPI stacks running over Infiniband or OmniPath require the ability to allocate more\n    # locked memory than the default limit. Unfortunately, user processes on login nodes\n    # may have a small memory limit (check it by ulimit -a) which by default are propagated\n    # into Slurm jobs and hence cause fabric errors for MPI.\n    PropagateResourceLimitsExcept=MEMLOCK\n\n    ProctrackType=proctrack/cgroup\n    TaskPlugin=task/cgroup\n    SwitchType=switch/none\n    MpiDefault=pmix_v2\n    ReturnToService=2\n    GresTypes=gpu\n    PreemptType=preempt/qos\n    PreemptMode=REQUEUE\n    PreemptExemptTime=-1\n    Prolog=/etc/slurm/prolog.d/*\n    Epilog=/etc/slurm/epilog.d/*\n\n    # Federation\n    FederationParameters=fed_display\n')),(0,r.kt)("h2",{id:"3-slurm-db-deployment"},"3. Slurm DB Deployment"),(0,r.kt)("h3",{id:"3a-secrets"},"3.a. Secrets"),(0,r.kt)("p",null,"Assuming you have deployed LDAP and MySQL, we will store the ",(0,r.kt)("inlineCode",{parentName:"p"},"slurmdbd.conf")," inside a secret:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a ",(0,r.kt)("inlineCode",{parentName:"li"},"-secret.yml.local")," file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="argo/slurm-cluster/secrets/slurmdbd-conf-secret.yml.local"',title:'"argo/slurm-cluster/secrets/slurmdbd-conf-secret.yml.local"'},"apiVersion: v1\nkind: Secret\nmetadata:\n  name: slurmdbd-conf-secret\n  namespace: slurm-cluster\ntype: Opaque\nstringData:\n  slurmdbd.conf: |\n    # See https://slurm.schedmd.com/slurmdbd.conf.html\n    ### Main\n    DbdHost=slurm-cluster-<FILL ME: cluster name>-db-0\n    SlurmUser=slurm\n\n    ### Logging\n    DebugLevel=debug5   # optional, defaults to 'info'. Possible values: fatal, error, info, verbose, debug, debug[2-5]\n    LogFile=/var/log/slurm/slurmdbd.log\n    PidFile=/var/run/slurmdbd.pid\n    LogTimeFormat=thread_id\n\n    AuthAltTypes=auth/jwt\n    AuthAltParameters=jwt_key=/var/spool/slurm/jwt_hs256.key\n\n    ### Database server configuration\n    StorageType=accounting_storage/mysql\n    StorageHost=<FILL ME>\n    StorageUser=<FILL ME>\n    StoragePass=<FILL ME>\n")),(0,r.kt)("p",null,"Replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"<FILL ME>")," according to your existing configuration."),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Seal the secret:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local:/ClusterFactory-CE"',title:'"user@local:/ClusterFactory-CE"'},"cfctl kubeseal\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Apply the SealedSecret:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local:/ClusterFactory-CE"',title:'"user@local:/ClusterFactory-CE"'},"kubectl apply -f argo/slurm-cluster/secrets/slurmdbd-conf-sealed-secret.yml\n")),(0,r.kt)("h3",{id:"3b-values-enable-slurm-db"},"3.b. Values: Enable SLURM DB"),(0,r.kt)("p",null,"Edit the ",(0,r.kt)("inlineCode",{parentName:"p"},"elm/slurm-cluster/values-<cluster name>.yaml")," values"),(0,r.kt)("p",null,"Let's add the values to deploy a SLURM DB."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="helm/slurm-cluster/values-<cluster name>.yaml"',title:'"helm/slurm-cluster/values-<cluster','name>.yaml"':!0},"db:\n  enabled: true\n\n  config:\n    secretName: slurmdbd-conf-secret\n")),(0,r.kt)("p",null,"If you are using LDAPS and the CA is private:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="helm/slurm-cluster/values-<cluster name>.yaml"',title:'"helm/slurm-cluster/values-<cluster','name>.yaml"':!0},"db:\n  enabled: true\n\n  config:\n    secretName: slurmdbd-conf-secret\n\n  command: ['sh', '-c', 'update-ca-trust && /init']\n\n  volumeMounts:\n    - name: ca-cert\n      mountPath: /etc/pki/ca-trust/source/anchors/example.com.ca.pem\n      subPath: example.com.ca.pem\n\n  volumes:\n    - name: ca-cert\n      secret:\n        secretName: local-ca-secret\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"local-ca-secret")," is a Secret containing ",(0,r.kt)("inlineCode",{parentName:"p"},"example.com.ca.pem"),"."),(0,r.kt)("p",null,"You can already deploy it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'git add .\ngit commit -m "Added SLURM DB values"\ngit push\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local:/ClusterFactory-CE"',title:'"user@local:/ClusterFactory-CE"'},"# This is optional if the application is already deployed.\nkubectl apply -f argo/slurm-cluster/apps/slurm-cluster-<cluster name>-app.yml\n")),(0,r.kt)("p",null,"The service should be accessible at the address ",(0,r.kt)("inlineCode",{parentName:"p"},"slurm-cluster-<cluster name>-db-0.slurm-cluster.svc.cluster.local"),". Use that URL in the slurm config."),(0,r.kt)("h2",{id:"4-slurm-controller-deployment"},"4. Slurm Controller Deployment"),(0,r.kt)("h3",{id:"4a-volumes"},"4.a. Volumes"),(0,r.kt)("p",null,"We will use NFS. Feel free to use another type of storage."),(0,r.kt)(s.Z,{groupId:"volume",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"storage-class",label:"StorageClass (dynamic)",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="argo/slurm-cluster/volumes/controller-state-<cluster name>-nfs.yaml"',title:'"argo/slurm-cluster/volumes/controller-state-<cluster','name>-nfs.yaml"':!0},"apiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: controller-state-<cluster name>-nfs\n  namespace: slurm-cluster\n  labels:\n    app: slurm-controller\n    topology.kubernetes.io/region: <FILL ME> # <country code>-<city>\n    topology.kubernetes.io/zone: <FILL ME> # <country code>-<city>-<index>\nprovisioner: nfs.csi.k8s.io\nparameters:\n  server: <FILL ME> # IP or host\n  share: <FILL ME> # /srv/nfs/k8s/slurmctl\n  mountPermissions: '0775'\nmountOptions:\n  - hard\n  - nfsvers=4.1\n  - noatime\n  - nodiratime\nvolumeBindingMode: Immediate\nreclaimPolicy: Retain\nallowedTopologies:\n  - matchLabelExpressions:\n      - key: topology.kubernetes.io/zone\n        values:\n          - <FILL ME> # <country code>-<city>-<index>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local:/ClusterFactory-CE"',title:'"user@local:/ClusterFactory-CE"'},"kubectl apply -f argo/slurm-cluster/volumes/controller-state-<cluster name>-nfs.yaml\n"))),(0,r.kt)(o.Z,{value:"persistent-volume",label:"PersistentVolume (static)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="argo/slurm-cluster/volumes/controller-state-<cluster name>-pv.yaml"',title:'"argo/slurm-cluster/volumes/controller-state-<cluster','name>-pv.yaml"':!0},"apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: controller-state-<cluster name>-pv\n  namespace: slurm-cluster\n  labels:\n    app: slurm-controller\n    topology.kubernetes.io/region: <FILL ME> # <country code>-<city>\n    topology.kubernetes.io/zone: <FILL ME> # <country code>-<city>-<index>\nspec:\n  capacity:\n    storage: 10Gi\n  mountOptions:\n    - hard\n    - nfsvers=4.1\n    - noatime\n    - nodiratime\n  csi:\n    driver: nfs.csi.k8s.io\n    readOnly: false\n    volumeHandle: <unique id> # uuidgen\n    volumeAttributes:\n      server: <FILL ME> # IP or host\n      share: <FILL ME> # /srv/nfs/k8s/slurmctl\n      mountPermissions: '0775'\n  accessModes:\n    - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Retain\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local:/ClusterFactory-CE"',title:'"user@local:/ClusterFactory-CE"'},"kubectl apply -f argo/slurm-cluster/volumes/controller-state-<cluster name>-pv.yaml\n")),(0,r.kt)("p",null,"The label ",(0,r.kt)("inlineCode",{parentName:"p"},"app=slurm-controller")," will be used by the PersistentVolumeClaim."))),(0,r.kt)("h3",{id:"4b-values-enable-slurm-controller"},"4.b. Values: Enable SLURM Controller"),(0,r.kt)("p",null,"Let's add the values to deploy a SLURM Controller."),(0,r.kt)(s.Z,{groupId:"volume",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"storage-class",label:"StorageClass (dynamic)",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="helm/slurm-cluster/values-<cluster name>.yaml"',title:'"helm/slurm-cluster/values-<cluster','name>.yaml"':!0},"controller:\n  enabled: true\n\n  persistence:\n    storageClassName: 'controller-state-<cluster name>-nfs'\n    accessModes: ['ReadWriteOnce']\n    size: 10Gi\n\n  nodeSelector:\n    topology.kubernetes.io/region: <FILL ME> # <country code>-<city>\n    topology.kubernetes.io/zone: <FILL ME> # <country code>-<city>-<index>\n\n  resources:\n    requests:\n      cpu: '250m'\n      memory: '1Gi'\n    limits:\n      cpu:\n      memory: '1Gi'\n"))),(0,r.kt)(o.Z,{value:"persistent-volume",label:"PersistentVolume (static)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="helm/slurm-cluster/values-<cluster name>.yaml"',title:'"helm/slurm-cluster/values-<cluster','name>.yaml"':!0},"controller:\n  enabled: true\n\n  persistence:\n    storageClassName: ''\n    accessModes: ['ReadWriteOnce']\n    size: 10Gi\n    selectorLabels:\n      app: slurm-controller\n      topology.kubernetes.io/region: <FILL ME> # <country code>-<city>\n      topology.kubernetes.io/zone: <FILL ME> # <country code>-<city>-<index>\n\n  nodeSelector:\n    kubernetes.io/hostname: <FILL ME>\n    topology.kubernetes.io/region: <FILL ME> # <country code>-<city>\n    topology.kubernetes.io/zone: <FILL ME> # <country code>-<city>-<index>\n\n  resources:\n    requests:\n      cpu: '250m'\n      memory: '1Gi'\n    limits:\n      cpu:\n      memory: '1Gi'\n")))),(0,r.kt)("p",null,"Notice that ",(0,r.kt)("inlineCode",{parentName:"p"},"kubernetes.io/hostname")," is used, this is because the slurm controller will be using the host network and we don't want to make the slurm controller move around."),(0,r.kt)("p",null,"We might develop a HA setup in the future version of ClusterFactory."),(0,r.kt)("p",null,"If you are using LDAPS and the CA is private, append these values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="helm/slurm-cluster/values-<cluster name>.yaml"',title:'"helm/slurm-cluster/values-<cluster','name>.yaml"':!0},"controller:\n  # ...\n  command: ['sh', '-c', 'update-ca-trust && /init']\n\n  volumeMounts:\n    - name: ca-cert\n      mountPath: /etc/pki/ca-trust/source/anchors/example.com.ca.pem\n      subPath: example.com.ca.pem\n\n  volumes:\n    - name: ca-cert\n      secret:\n        secretName: local-ca-secret\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"local-ca-secret")," is a Secret containing ",(0,r.kt)("inlineCode",{parentName:"p"},"example.com.ca.pem"),"."),(0,r.kt)("p",null,"You can already deploy it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'git add .\ngit commit -m "Added SLURM Controller values"\ngit push\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local:/ClusterFactory-CE"',title:'"user@local:/ClusterFactory-CE"'},"# This is optional if the application is already deployed.\nkubectl apply -f argo/slurm-cluster/apps/slurm-cluster-<cluster name>-app.yml\n")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The SLURM controller is in host mode using ",(0,r.kt)("inlineCode",{parentName:"p"},"hostPort")," so it can communicate with the bare-metal hosts. There\nis also a SLURM controller ",(0,r.kt)("inlineCode",{parentName:"p"},"Service")," running for the internal communication with Slurm DB and Slurm Login."))),(0,r.kt)("h3",{id:"4c-testing-sinfo-from-the-controller-node"},"4.c Testing: ",(0,r.kt)("inlineCode",{parentName:"h3"},"sinfo")," from the controller node"),(0,r.kt)("p",null,"You should be able to run a ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl exec")," session on the controller node and execute ",(0,r.kt)("inlineCode",{parentName:"p"},"sinfo"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local"',title:'"user@local"'},"[user@local /]> kubectl exec -it -n slurm-cluster slurm-cluster-<cluster-name>-controller-0 -c slurm-cluster-<cluster-name>-controller -- bash\n\n[root@slurm-cluster-reindeer-controller-0 /]> sinfo\nPARTITION   AVAIL  TIMELIMIT  NODES  STATE NODELIST\nmain*          up   infinite     12  down* cn[1-12]\n")),(0,r.kt)("h2",{id:"5-slurm-compute-bare-metal-deployment"},"5. Slurm Compute Bare-Metal Deployment"),(0,r.kt)("h3",{id:"5a-build-an-os-image-with-slurm"},"5.a. Build an OS Image with Slurm"),(0,r.kt)("p",null,"We have enabled ",(0,r.kt)("inlineCode",{parentName:"p"},"config-less")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"slurm.conf"),"."),(0,r.kt)("p",null,"We need to build an OS Image with Slurm Daemon installed."),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"packer-recipes")," directory, we can create a recipe called ",(0,r.kt)("inlineCode",{parentName:"p"},"compute.my-cluster.json"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="packer-recipes/rocky/compute.my-cluster.json"',title:'"packer-recipes/rocky/compute.my-cluster.json"'},'{\n  "variables": {\n    "boot_wait": "3s",\n    "disk_size": "50G",\n    "iso_checksum": "53a62a72881b931bdad6b13bcece7c3a2d4ca9c4a2f1e1a8029d081dd25ea61f",\n    "iso_url": "https://download.rockylinux.org/vault/rocky/8.4/isos/x86_64/Rocky-8.4-x86_64-boot.iso",\n    "memsize": "8192",\n    "numvcpus": "8"\n  },\n  "builders": [\n    {\n      "type": "qemu",\n      "accelerator": "kvm",\n      "communicator": "none",\n      "boot_command": [\n        "<up><tab><bs><bs><bs><bs><bs> ",\n        "inst.ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ks.my-cluster.cfg ",\n        "inst.cmdline",\n        "<enter><wait>"\n      ],\n      "boot_wait": "{{ user `boot_wait` }}",\n      "disk_size": "{{ user `disk_size` }}",\n      "iso_url": "{{ user `iso_url` }}",\n      "iso_checksum": "{{ user `iso_checksum` }}",\n      "headless": true,\n      "cpus": "{{ user `numvcpus` }}",\n      "memory": "{{ user `memsize` }}",\n      "vnc_bind_address": "0.0.0.0",\n      "http_directory": "http",\n      "shutdown_timeout": "1h",\n      "qemuargs": [["-serial", "stdio"]]\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"Create also the ",(0,r.kt)("inlineCode",{parentName:"p"},"ks.my-cluster.cfg")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"http")," directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="packer-recipes/rocky/http/ks.my-cluster.cfg"',title:'"packer-recipes/rocky/http/ks.my-cluster.cfg"'},'url --url="https://dl.rockylinux.org/vault/rocky/8.4/BaseOS/x86_64/os/"\n# License agreement\neula --agreed\n# Disable Initial Setup on first boot\nfirstboot --disable\n# Poweroff after the install is finished\npoweroff\n# Firewall\nfirewall --disable\n# Disable Initial Setup on first boot\nfirstboot --disable\nignoredisk --only-use=vda\n# System language\nlang en_US.UTF-8\n# Keyboard layout\nkeyboard us\n# Network information\nnetwork --bootproto=dhcp --device=eth0\n# SELinux configuration\nselinux --disabled\n# System timezone\ntimezone UTC --isUtc\n# System bootloader configuration\nbootloader --location=mbr --driveorder="vda" --timeout=1\n# Root password\nrootpw --plaintext an_example_of_default_password\n# System services\nservices --enabled="chronyd"\n\nrepo --name="AppStream" --baseurl=https://dl.rockylinux.org/vault/rocky/8.4/AppStream/x86_64/os/\nrepo --name="Extras" --baseurl=https://dl.rockylinux.org/vault/rocky/8.4/extras/x86_64/os/\nrepo --name="PowerTools" --baseurl=https://dl.rockylinux.org/vault/rocky/8.4/PowerTools/x86_64/os/\nrepo --name="epel" --baseurl=https://mirror.init7.net/fedora/epel/8/Everything/x86_64/\nrepo --name="deepsquare" --baseurl=https://yum.deepsquare.run/\nrepo --name="beegfs" --baseurl=https://www.beegfs.io/release/beegfs_7.2.6/dists/rhel8/\n\n# Clear the Master Boot Record\nzerombr\n# Remove partitions\nclearpart --all --initlabel\n# Automatically create partition\npart / --size=1 --grow --asprimary --fstype=xfs\n\n# Postinstall\n%post --erroronfail\nset -ex\nmkdir /opt/xcat\n\n# Install xCat provisioning service\ncurl -fsSL "https://raw.githubusercontent.com/xcat2/xcat-core/master/xCAT/postscripts/xcatpostinit1.netboot" -o /opt/xcat/xcatpostinit1\nchmod 755 /opt/xcat/xcatpostinit1\n\ncurl -fsSL "https://raw.githubusercontent.com/xcat2/xcat-core/master/xCAT/postscripts/xcatpostinit1.service" -o /etc/systemd/system/xcatpostinit1.service\nln -s "../xcatpostinit1.service" "/etc/systemd/system/multi-user.target.wants/xcatpostinit1.service"\n\n# Postinstall\n#-- No firewall\nsystemctl disable firewalld\n\n#-- Pam mkhomedir: auto create home folder for ldap users\nauthselect select sssd \\\n  with-mkhomedir \\\n  with-sudo \\\n  --force --quiet\nsed -Ei \'s|UMASK\\t+[0-9]+|UMASK\\t\\t027|g\' /etc/login.defs\n\n#-- Secure umask for newly users\necho \'umask 0027\' >> /etc/profile\n\n# Kickstart copies install boot options. Serial is turned on for logging with\n# Packer which disables console output. Disable it so console output is shown\n# during deployments\nsed -i \'s/^GRUB_TERMINAL=.*/GRUB_TERMINAL_OUTPUT="console"/g\' /etc/default/grub\nsed -i \'/GRUB_SERIAL_COMMAND="serial"/d\' /etc/default/grub\nsed -ri \'s/(GRUB_CMDLINE_LINUX=".*)\\s+console=ttyS0(.*")/\\1\\2/\' /etc/default/grub\n\n# Clean up install config not applicable to deployed environments.\nfor f in resolv.conf fstab; do\n    rm -f /etc/$f\n    touch /etc/$f\n    chown root:root /etc/$f\n    chmod 644 /etc/$f\ndone\n\ncat << EOF >>/etc/fstab\ndevpts  /dev/pts devpts   gid=5,mode=620 0 0\ntmpfs   /dev/shm tmpfs    defaults       0 0\nproc    /proc    proc     defaults       0 0\nsysfs   /sys     sysfs    defaults       0 0\nEOF\n\nrm -f /etc/sysconfig/network-scripts/ifcfg-[^lo]*\n\ndnf clean all\n%end\n\n%packages\n@minimal-environment\nchrony\n\n# kernel\nkernel-4.18.0-305.17.1.el8_4.x86_64\nkernel-devel-4.18.0-305.17.1.el8_4.x86_64\nkernel-headers-4.18.0-305.17.1.el8_4.x86_64\nkernel-tools-4.18.0-305.17.1.el8_4.x86_64\nkernel-modules-4.18.0-305.17.1.el8_4.x86_64\nkernel-core-4.18.0-305.17.1.el8_4.x86_64\nkernel-modules-extra-4.18.0-305.17.1.el8_4.x86_64\n\nbash-completion\ncloud-init\n# cloud-init only requires python3-oauthlib with MAAS. As such upstream\n# removed this dependency.\npython3-oauthlib\nrsync\ntar\n\n# disk growing\ncloud-utils-growpart\n\n# grub2-efi-x64 ships grub signed for UEFI secure boot. If grub2-efi-x64-modules\n# is installed grub will be generated on deployment and unsigned which breaks\n# UEFI secure boot.\ngrub2-efi-x64\nefibootmgr\nshim-x64\ndosfstools\nlvm2\nmdadm\ndevice-mapper-multipath\niscsi-initiator-utils\n\ndnf-plugins-core\n\n# other packages\nnet-tools\nnfs-utils\nopenssh-server\nrsync\ntar\nutil-linux\nwget\npython3\ntar\nbzip2\nbc\ndracut\ndracut-network\nrsyslog\nhostname\ne2fsprogs\nethtool\nparted\nopenssl\ndhclient\nopenssh-clients\nbash\nvim-minimal\nrpm\niputils\nperl-interpreter\ngawk\nxz\nsquashfs-tools\ncpio\nsudo\nmake\nbash-completion\nnano\npciutils\ngit\nmlocate\nsssd\nvim-enhanced\nsystemd-udev\nnumactl\nmunge\nlibevent-devel\ntmux\noddjob\noddjob-mkhomedir\nredis\nunzip\nnmap\nflex\ntk\nbison\nlibgfortran\ntcl\ngcc-gfortran\nlibcurl\nlibnl3-devel\npython39\nnumactl-libs\nxfsprogs\nzsh\n#pkgconf-pkg-config\nrpm-build\nhwloc\nhwloc-libs\nhwloc-devel\ntcsh\nksh\nxorg-x11-fonts-ISO8859-1-75dpi.noarch\nxorg-x11-fonts-cyrillic.noarch\n\n# otherpkgs\nhtop\npmix2\npmix3\npmix4\nslurm\nslurm-contribs\nslurm-libpmi\nslurm-pam_slurm\nslurm-slurmd\n# beeond build dependency\nelfutils-libelf-devel\n\n-plymouth\n# Remove Intel wireless firmware\n-i*-firmware\n%end\n\n')),(0,r.kt)("p",null,"Build the image with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local:/ClusterFactory-CE/packer-recipes/rocky"',title:'"user@local:/ClusterFactory-CE/packer-recipes/rocky"'},"packer build compute.my-cluster.json\n")),(0,r.kt)("p",null,"And send the os image to xcat. ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/provisioning/packer-build"},'Follow the guide "Build an OS Image with Packer" for more details'),"."),(0,r.kt)("h3",{id:"5b-xcat-postbootscripts"},"5.b. xCAT Postbootscripts"),(0,r.kt)("p",null,"Next, you have to configure a service by using a xCAT postscript. Our recommendation is to use a xCAT postscript to pull a Git repository which, based on the content of the repository, copies the files and executes the postscripts in that Git repository."),(0,r.kt)("p",null,"This way, the GitOps practice is always followed and permits to adapt for the future version of ClusterFactory."),(0,r.kt)("p",null,"The service:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-properties",metastring:'title="/etc/systemd/system/slurmd.service"',title:'"/etc/systemd/system/slurmd.service"'},"[Unit]\nDescription=Slurm node daemon\nAfter=network.target munge.service\n\n[Service]\nType=forking\nExecStartPre=/usr/bin/id slurm\nRestart=always\nRestartSec=3\nExecStart=/usr/sbin/slurmd -d /usr/sbin/slurmstepd --conf-server <node host IP>\nExecReload=/bin/kill -HUP $MAINPID\nPIDFile=/var/run/slurmd.pid\nKillMode=process\nLimitNOFILE=51200\nLimitMEMLOCK=infinity\nLimitSTACK=infinity\n\n[Install]\nWantedBy=multi-user.target\n")),(0,r.kt)("p",null,"A simple postbootscript:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="sample-configure-slurm.sh',title:'"sample-configure-slurm.sh'},"#!/bin/sh -ex\ncat <<\\END | base64 -d >/etc/munge/munge.key\n...\nEND\n\nchmod 600 /etc/munge/munge.key\n\ncat <<\\END >/etc/sssd/sssd.conf\n...\nEND\n\nchmod 600 /etc/sssd/sssd.conf\n\ncat <<\\END >/etc/systemd/system/slurmd.service\n[Unit]\nDescription=Slurm node daemon\nAfter=network.target munge.service remote-fs.target\nWants=network-online.target\n\n[Service]\nType=simple\nEnvironmentFile=-/etc/default/slurmd\nRestart=always\nRestartSec=3\nExecStart=/usr/sbin/slurmd -D -d /usr/sbin/slurmstepd --conf-server $CONTROLLER_HOST\nExecReload=/bin/kill -HUP $MAINPID\nPIDFile=/var/run/slurmd.pid\nKillMode=process\nLimitNOFILE=131072\nLimitMEMLOCK=infinity\nLimitSTACK=infinity\nDelegate=yes\n\nStandardOutput=null\nStandardError=null\n\n[Install]\nWantedBy=multi-user.target\nEND\n\n#-- Wait for LDAP\nupdate-ca-trust\nsystemctl restart sssd\nwhile ! id slurm\ndo\n  sleep 1\ndone\n\nsystemctl daemon-reload\nsystemctl restart munge\nsystemctl enable slurmd\nsystemctl start --no-block slurmd\n")),(0,r.kt)("p",null,"After setup SLURM, you should also:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Mount the home directory of the LDAP users (probably like ",(0,r.kt)("inlineCode",{parentName:"li"},"/home/ldap-users"),")"),(0,r.kt)("li",{parentName:"ul"},"Use a postscript to configure SSSD"),(0,r.kt)("li",{parentName:"ul"},"Use a postscript to import the ",(0,r.kt)("inlineCode",{parentName:"li"},"munge.key"))),(0,r.kt)("h3",{id:"5c-reboot-the-nodes"},"5.c. Reboot the nodes"),(0,r.kt)("p",null,"If the controller is running, the nodes should automatically receive the ",(0,r.kt)("inlineCode",{parentName:"p"},"slurm.conf")," inside ",(0,r.kt)("inlineCode",{parentName:"p"},"/run/slurm/conf"),"."),(0,r.kt)("h2",{id:"6-slurm-login-deployment"},"6. Slurm Login Deployment"),(0,r.kt)("h3",{id:"6a-secrets-and-volumes"},"6.a. Secrets and Volumes"),(0,r.kt)("h4",{id:"ssh-server-configuration"},"SSH Server configuration"),(0,r.kt)("p",null,"The login nodes are exposed to the external network using Multus CNI and the IPVLAN plugin. This is to expose the ",(0,r.kt)("inlineCode",{parentName:"p"},"srunPortRange")," and the SSH port.\nThanks to SSSD, the users can log in to the nodes using SSH using the passwords stored in LDAP."),(0,r.kt)("p",null,"We have to generate the SSH host keys:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local"',title:'"user@local"'},"yes 'y' | ssh-keygen -N '' -f ./ssh_host_rsa_key -t rsa -C login-node\nyes 'y' | ssh-keygen -N '' -f ./ssh_host_ecdsa_key -t ecdsa -C login-node\nyes 'y' | ssh-keygen -N '' -f ./ssh_host_ed25519_key -t ed25519 -C login-node\n")),(0,r.kt)("p",null,"6 files will be generated. We will also add our ",(0,r.kt)("inlineCode",{parentName:"p"},"sshd_config"),"."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a ",(0,r.kt)("inlineCode",{parentName:"li"},"-secret.yml.local")," file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="argo/slurm-cluster/secrets/login-sshd-secret.yml.local"',title:'"argo/slurm-cluster/secrets/login-sshd-secret.yml.local"'},"apiVersion: v1\nkind: Secret\nmetadata:\n  name: login-sshd-secret\n  namespace: slurm-cluster\ntype: Opaque\nstringData:\n  ssh_host_ecdsa_key: |\n    -----BEGIN OPENSSH PRIVATE KEY-----\n    <FILL ME>\n    -----END OPENSSH PRIVATE KEY-----\n  ssh_host_ecdsa_key.pub: |\n    ecdsa-sha2-nistp256 <FILL ME>\n  ssh_host_ed25519_key: |\n    -----BEGIN OPENSSH PRIVATE KEY-----\n    <FILL ME>\n    -----END OPENSSH PRIVATE KEY-----\n  ssh_host_ed25519_key.pub: |\n    ssh-ed25519 <FILL ME>\n  ssh_host_rsa_key: |\n    -----BEGIN OPENSSH PRIVATE KEY-----\n    <FILL ME>\n    -----END OPENSSH PRIVATE KEY-----\n  ssh_host_rsa_key.pub: |\n    ssh-rsa <FILL ME>\n  sshd_config: |\n    Port 22\n    AddressFamily any\n    ListenAddress 0.0.0.0\n    ListenAddress ::\n\n    HostKey /etc/ssh/ssh_host_rsa_key\n    HostKey /etc/ssh/ssh_host_ecdsa_key\n    HostKey /etc/ssh/ssh_host_ed25519_key\n\n    PermitRootLogin prohibit-password\n    PasswordAuthentication yes\n\n    # Change to yes to enable challenge-response passwords (beware issues with\n    # some PAM modules and threads)\n    ChallengeResponseAuthentication no\n\n    UsePAM yes\n\n    X11Forwarding yes\n    PrintMotd no\n    AcceptEnv LANG LC_*\n\n    # override default of no subsystems\n    Subsystem sftp  /usr/lib/openssh/sftp-server\n\n    AuthorizedKeysCommand /usr/bin/sss_ssh_authorizedkeys\n    AuthorizedKeysCommandUser root\n")),(0,r.kt)("p",null,"Replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"<FILL ME>")," with the values based on the generated files."),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Seal the secret:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local:/ClusterFactory-CE"',title:'"user@local:/ClusterFactory-CE"'},"cfctl kubeseal\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Apply the SealedSecret:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local:/ClusterFactory-CE"',title:'"user@local:/ClusterFactory-CE"'},"kubectl apply -f argo/slurm-cluster/secrets/login-sshd-sealed-secret.yml\n")),(0,r.kt)("h4",{id:"home-directory-for-the-ldap-users"},"Home directory for the LDAP users"),(0,r.kt)("p",null,"If you have configured your LDAP server, you might have to change the ",(0,r.kt)("inlineCode",{parentName:"p"},"homeDirectory")," to something like ",(0,r.kt)("inlineCode",{parentName:"p"},"/home/ldap-users"),"."),(0,r.kt)("p",null,"You must mount the home directory of the LDAP users using NFS."),(0,r.kt)("p",null,"DO NOT use ",(0,r.kt)("inlineCode",{parentName:"p"},"StorageClass")," since the provisioning is static. We don't want to create a volume per replica. There is only one common volume."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="argo/slurm-cluster/volumes/ldap-users-<cluster name>-pv.yml"',title:'"argo/slurm-cluster/volumes/ldap-users-<cluster','name>-pv.yml"':!0},"apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: ldap-users-<cluster name>-pv\n  namespace: slurm-cluster\n  labels:\n    app: slurm-login\n    topology.kubernetes.io/region: <FILL ME> # <country code>-<city>\n    topology.kubernetes.io/zone: <FILL ME> # <country code>-<city>-<index>\nspec:\n  capacity:\n    storage: 1000Gi\n  mountOptions:\n    - hard\n    - nfsvers=4.1\n    - noatime\n    - nodiratime\n  csi:\n    driver: nfs.csi.k8s.io\n    readOnly: false\n    volumeHandle: <unique id> # uuidgen\n    volumeAttributes:\n      server: <FILL ME> # IP or host\n      share: <FILL ME> # /srv/nfs/k8s/ldap-users\n  accessModes:\n    - ReadWriteMany\n  persistentVolumeReclaimPolicy: Retain\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: ldap-users-<cluster name>-pvc\n  namespace: slurm-cluster\n  labels:\n    app: slurm-login\n    topology.kubernetes.io/region: <FILL ME> # <country code>-<city>\n    topology.kubernetes.io/zone: <FILL ME> # <country code>-<city>-<index>\nspec:\n  volumeName: ldap-users-<cluster name>-pv\n  accessModes: [ReadWriteMany]\n  storageClassName: ''\n  resources:\n    requests:\n      storage: 1000Gi\n")),(0,r.kt)("p",null,"Apply the PV and PVC:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local:/ClusterFactory-CE"',title:'"user@local:/ClusterFactory-CE"'},"kubectl apply -f argo/slurm-cluster/volumes/ldap-users-<cluster name>-pv.yml\n")),(0,r.kt)("h3",{id:"6b-values-enable-slurm-login"},"6.b. Values: Enable SLURM Login"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="helm/slurm-cluster/values-<cluster name>.yaml"',title:'"helm/slurm-cluster/values-<cluster','name>.yaml"':!0},"login:\n  enabled: true\n  replicas: 1\n\n  sshd:\n    secretName: login-sshd-secret\n\n  nodeSelector:\n    topology.kubernetes.io/region: <FILL ME> # <country code>-<city>\n    topology.kubernetes.io/zone: <FILL ME> # <country code>-<city>-<index>\n\n  # Extra volume mounts\n  volumeMounts:\n    - name: ldap-users-pvc\n      mountPath: /home/ldap-users\n\n  # Extra volumes\n  volumes:\n    - name: ldap-users-pvc\n      persistentVolumeClaim:\n        claimName: ldap-users-<cluster name>-pvc\n\n  net:\n    # Kubernetes host interface\n    masterInterface: eth0\n    mode: l2\n    type: ipvlan\n\n    # https://www.cni.dev/plugins/current/ipam/static/\n    ipam:\n      type: host-local\n      ranges:\n        - - subnet: 192.168.0.0/24\n            rangeStart: 192.168.0.20\n            rangeEnd: 192.168.0.21\n            gateway: 192.168.0.1\n      routes:\n        - dst: 192.168.0.0/24\n")),(0,r.kt)("p",null,"Edit the values accordingly."),(0,r.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Because ",(0,r.kt)("inlineCode",{parentName:"p"},"k8s-pod-network")," is the default network, you must write routes to your networks."),(0,r.kt)("p",{parentName:"div"},"For example, if we have two sites ",(0,r.kt)("inlineCode",{parentName:"p"},"10.10.0.0/24")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"10.10.1.0/24"),", you would write:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"ipam:\n  type: host-local\n  ranges:\n    - - subnet: 10.10.0.0/24\n        rangeStart: 10.10.0.20\n        rangeEnd: 10.10.0.21\n        gateway: 10.10.0.1\n  routes:\n    - dst: 10.10.0.0/24\n    - dst: 10.10.1.0/24\n")),(0,r.kt)("p",{parentName:"div"},"If we ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl exec")," to the container and run ",(0,r.kt)("inlineCode",{parentName:"p"},"ip route"),", you would see:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="root@slurm-cluster-e<cluster name>-login-b9b7cd9d5-9ntkn"',title:'"root@slurm-cluster-e<cluster','name>-login-b9b7cd9d5-9ntkn"':!0},"# ip route\ndefault via 169.254.1.1 dev eth0\n10.10.0.0/24 via 10.10.0.1 dev net1\n10.10.1.0/24 via 10.10.0.1 dev net1\n169.254.1.1 dev eth0 scope link\n10.10.0.0/20 via 10.10.0.1 dev net1\n10.10.0.0/20 dev net1 proto kernel scope link src 10.10.0.21\n")),(0,r.kt)("p",{parentName:"div"},"The issue is tracked at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SquareFactory/ClusterFactory-CE/issues/29"},"SquareFactory/ClusterFactory-CE#29")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/projectcalico/calico/issues/5199"},"projectcalico/calico#5199"),"."))),(0,r.kt)("p",null,"If you are using LDAPS and the CA is private, add these values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="helm/slurm-cluster/values-<cluster name>.yaml"',title:'"helm/slurm-cluster/values-<cluster','name>.yaml"':!0},"login:\n  # ...\n  command: ['sh', '-c', 'update-ca-trust && /init']\n\n  volumeMounts:\n    - name: ldap-users-pvc\n      mountPath: /home/ldap-users\n    - name: ca-cert\n      mountPath: /etc/pki/ca-trust/source/anchors/example.com.ca.pem\n      subPath: example.com.ca.pem\n\n  volumes:\n    - name: ldap-users-pvc\n      persistentVolumeClaim:\n        claimName: ldap-users-<cluster name>-pvc\n    - name: ca-cert\n      secret:\n        secretName: local-ca-secret\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"local-ca-secret")," is a Secret containing ",(0,r.kt)("inlineCode",{parentName:"p"},"example.com.ca.pem"),"."),(0,r.kt)("p",null,"You can deploy it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'git add .\ngit commit -m "Added SLURM Login values"\ngit push\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local:/ClusterFactory-CE"',title:'"user@local:/ClusterFactory-CE"'},"# This is optional if the application is already deployed.\nkubectl apply -f argo/slurm-cluster/apps/slurm-cluster-<cluster name>-app.yml\n")),(0,r.kt)("h3",{id:"6c-testing-access-to-a-slurm-login-node"},"6.c Testing: Access to a SLURM Login node"),(0,r.kt)("p",null,"Because the container is exposed to the external network, you should be able to ssh directly to the login node."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="user@local"',title:'"user@local"'},"ssh user@login-node\n")),(0,r.kt)("p",null,"If the LDAP User ",(0,r.kt)("inlineCode",{parentName:"p"},"user")," exists, the login node should be asking for a password."))}h.isMDXComponent=!0},6725:function(e,t,n){t.Z=n.p+"assets/images/image-20220512151655613-a88d0547e2bc1fb1d959aa9d46383a2e.png"}}]);