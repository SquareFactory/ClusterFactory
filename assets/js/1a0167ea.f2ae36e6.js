"use strict";(self.webpackChunkcluster_factory_ce_docs=self.webpackChunkcluster_factory_ce_docs||[]).push([[9577],{9613:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(9496);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,y=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(y,l(l({ref:n},c),{},{components:t})):a.createElement(y,l({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8751:(e,n,t)=>{t.d(n,{Z:()=>l});var a=t(9496),r=t(5924);const o="tabItem_cuvL";function l(e){let{children:n,hidden:t,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:t},n)}},5632:(e,n,t)=>{t.d(n,{Z:()=>m});var a=t(665),r=t(9496),o=t(5924),l=t(2981),i=t(8291),s=t(9825),p=t(3772);const c="tabList_vL6X",d="tabItem_MPSI";function u(e){var n;const{lazy:t,block:l,defaultValue:u,values:m,groupId:y,className:g}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??h.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),k=(0,i.l)(f,((e,n)=>e.value===n.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===u?u:u??(null==(n=h.find((e=>e.props.default)))?void 0:n.props.value)??h[0].props.value;if(null!==b&&!f.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:N}=(0,s.U)(),[w,S]=(0,r.useState)(b),C=[],{blockElementScrollPositionUntilNextRender:T}=(0,p.o5)();if(null!=y){const e=v[y];null!=e&&e!==w&&f.some((n=>n.value===e))&&S(e)}const P=e=>{const n=e.currentTarget,t=C.indexOf(n),a=f[t].value;a!==w&&(T(n),S(a),null!=y&&N(y,String(a)))},x=e=>{var n;let t=null;switch(e.key){case"Enter":P(e);break;case"ArrowRight":{const n=C.indexOf(e.currentTarget)+1;t=C[n]??C[0];break}case"ArrowLeft":{const n=C.indexOf(e.currentTarget)-1;t=C[n]??C[C.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":l},g)},f.map((e=>{let{value:n,label:t,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,key:n,ref:e=>C.push(e),onKeyDown:x,onClick:P},l,{className:(0,o.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":w===n})}),t??n)}))),t?(0,r.cloneElement)(h.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==w})))))}function m(e){const n=(0,l.Z)();return r.createElement(u,(0,a.Z)({key:String(n)},e))}},1010:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var a=t(665),r=(t(9496),t(9613)),o=t(5632),l=t(8751);const i={},s="Setting up CoreDNS",p={unversionedId:"guides/setting-up-coredns",id:"guides/setting-up-coredns",title:"Setting up CoreDNS",description:"This guide repeats the same instructions as the Getting Started, but with slighly more descriptions.",source:"@site/docs/guides/02-setting-up-coredns.mdx",sourceDirName:"guides",slug:"/guides/setting-up-coredns",permalink:"/docs/guides/setting-up-coredns",draft:!1,editUrl:"https://github.com/SquareFactory/ClusterFactory/tree/main/web/docs/guides/02-setting-up-coredns.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"docs",previous:{title:"Setting up the Git repository for GitOps",permalink:"/docs/guides/setting-up-repository"},next:{title:"Setting up dashboards",permalink:"/docs/guides/setting-up-dashboards"}},c={},d=[{value:"The different entrypoints",id:"the-different-entrypoints",level:2},{value:"The official way: LoadBalancer/NodePort Service",id:"the-official-way-loadbalancernodeport-service",level:3},{value:"The <code>hostPort</code> way",id:"the-hostport-way",level:3},{value:"The <code>ipvlan</code> way",id:"the-ipvlan-way",level:3}],u={toc:d};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"setting-up-coredns"},"Setting up CoreDNS"),(0,r.kt)("p",null,"This guide repeats the same instructions as the ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started/core-apps-deployment#coredns-configuration"},"Getting Started"),", but with slighly more descriptions."),(0,r.kt)("h2",{id:"the-different-entrypoints"},"The different entrypoints"),(0,r.kt)("p",null,"To avoid mixing IP, this is a small reminder."),(0,r.kt)("p",null,"If MetalLB and Multus CNI have been successfully deployed, you now have several types of entry points to access a Kubernetes service."),(0,r.kt)("h3",{id:"the-official-way-loadbalancernodeport-service"},"The official way: LoadBalancer/NodePort Service"),(0,r.kt)("p",null,"Traefik has been configured to be the main Load Balancer. Its IP can be configured and exposed via MetalLB. Like so:"),(0,r.kt)(o.Z,{groupId:"metallb-config",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"l2",label:"L2/ARP",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="core/metallb/address-pools.yaml"',title:'"core/metallb/address-pools.yaml"'},"apiVersion: metallb.io/v1beta1\nkind: IPAddressPool\nmetadata:\n  name: main-pool\n  namespace: metallb\nspec:\n  addresses:\n    - 192.168.1.100/32\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="core/metallb/advertisements.yaml"',title:'"core/metallb/advertisements.yaml"'},"apiVersion: metallb.io/v1beta1\nkind: L2Advertisement\nmetadata:\n  name: l2-advertisement\n  namespace: metallb\nspec:\n  ipAddressPools:\n    - main-pool\n"))),(0,r.kt)(l.Z,{value:"bgp",label:"BGP",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="core/metallb/address-pools.yaml"',title:'"core/metallb/address-pools.yaml"'},"apiVersion: metallb.io/v1beta1\nkind: IPAddressPool\nmetadata:\n  name: main-pool\n  namespace: metallb\nspec:\n  addresses:\n    - 192.168.1.100/32\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="core/metallb/peers.yaml"',title:'"core/metallb/peers.yaml"'},"apiVersion: metallb.io/v1beta2\nkind: BGPPeer\nmetadata:\n  name: main-router\n  namespace: metallb\nspec:\n  myASN: 65001 # MetalLB Speaker ASN (Autonomous System Number)\n  peerASN: 65000 # The router ASN\n  peerAddress: 192.168.0.1 # The router address\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="core/metallb/advertisements.yaml"',title:'"core/metallb/advertisements.yaml"'},"apiVersion: metallb.io/v1beta1\nkind: BGPAdvertisement\nmetadata:\n  name: bgp-advertisement\n  namespace: metallb\nspec:\n  ipAddressPools:\n    - main-pool\n")))),(0,r.kt)("p",null,"The router will see this address and can forward external traffic to this IP."),(0,r.kt)("p",null,"To expose a Kubernetes pod, you will need to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Service")," and an ",(0,r.kt)("inlineCode",{parentName:"p"},"Ingress"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"IngressRoute"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Service")," will expose the pod to the other pods. The ",(0,r.kt)("inlineCode",{parentName:"p"},"Ingress"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"IngressRoute")," will forward the traffic based on rules."),(0,r.kt)("p",null,"The rules are often based on the domain name, therefore, you have to configure your DNS (or CoreDNS)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Scenario 1: I want to expose my Kubernetes pod to the world wide web.")),(0,r.kt)("p",null,"Then, you need to configure the DNS from a domain name registrar (like Google Domains, for example)."),(0,r.kt)("p",null,"The A record (or AAAA record) that you have to add is ",(0,r.kt)("inlineCode",{parentName:"p"},"my-app.example.com -> <router public ip>"),"."),(0,r.kt)("p",null,"If your kubernetes is multi-site and have multiple routers/IPs to the world wide web, you can create 2 DNS records for maximum Load Balancing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"A record (GEO) lb.example.com.  --\x3e <router 1 public ip>\n                                --\x3e <router 2 public ip>\nCNAME record my-app.example.com --\x3e lb.example.com\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Scenario 2: I want to expose my Kubenetes pod to the local network.")),(0,r.kt)("p",null,"Then, you can use a self-hosted DNS. Luckily, Kubernetes comes with a DNS integrated called CoreDNS."),(0,r.kt)("p",null,"By default, CoreDNS is exposed to the local network through:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"hostPort"),"s: Kubernetes nodes will have ports 53/udp and 53/tcp open."),(0,r.kt)("li",{parentName:"ul"},"The Load Balancer: Traefik will have ports 53/udp and 53/tcp open.")),(0,r.kt)("p",null,"You can configure your nodes to have a DNS config like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-config",metastring:'title="/etc/resolv.conf"',title:'"/etc/resolv.conf"'},"nameserver <load balancer IP>\n")),(0,r.kt)("p",null,"Or like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-config",metastring:'title="/etc/resolv.conf"',title:'"/etc/resolv.conf"'},"nameserver <kubernetes node IP>\n")),(0,r.kt)("p",null,"To add DNS records, you will need to direcly edit the CoreDNS configuration file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="core/coredns/overlays/prod/configmap.yaml"',title:'"core/coredns/overlays/prod/configmap.yaml"'},"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: coredns\n  namespace: kube-system\n  labels:\n    k0s.k0sproject.io/stack: coredns\ndata:\n  Corefile: |\n    .:53 {\n      errors\n      health {\n        lameduck 5s\n      }\n      ready\n      kubernetes cluster.local in-addr.arpa ip6.arpa {\n        pods insecure\n        fallthrough in-addr.arpa ip6.arpa\n        ttl 30\n      }\n      prometheus :9153\n      forward . 8.8.8.8\n      cache 30\n      loop\n      reload\n      loadbalance\n      }\n      internal:53 {\n        log\n        errors\n        ready\n        hosts /etc/coredns/internal.db\n        reload\n      }\n\n  internal.db: |\n    <load balancer IP> my-app.internal\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="core/coredns/overlays/prod/deployment.yaml > spec > template > spec > volumes"',title:'"core/coredns/overlays/prod/deployment.yaml',">":!0,spec:!0,template:!0,'volumes"':!0},"        volumes:\n          - name: config-volume\n            configMap:\n              name: coredns\n              items:\n                - key: Corefile\n                  path: Corefile\n+               - key: internal.db\n+                 path: internal.db\n              defaultMode: 420\n")),(0,r.kt)("p",null,"You can test your configuration by using ",(0,r.kt)("inlineCode",{parentName:"p"},"dig"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# Use host DNS configuration\ndig my-app.internal\n# Explicit DNS server\ndig @<DNS IP> my-app.internal\n")),(0,r.kt)("h3",{id:"the-hostport-way"},"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"hostPort")," way"),(0,r.kt)("p",null,"Containers can be exposed to the local network by using ",(0,r.kt)("inlineCode",{parentName:"p"},"hostPort"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"hostPort")," will use the Kubernetes host to expose the port."),(0,r.kt)("p",null,"It is efficient to use ",(0,r.kt)("inlineCode",{parentName:"p"},"hostPort"),' when using a DaemonSet. However, when using a Deployment, you will need to "stick" the pod to the node using a ',(0,r.kt)("inlineCode",{parentName:"p"},"nodeSelector"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Scenario 3: I want to expose my Kubenetes pod stuck on the controller node to the local network.")),(0,r.kt)("p",null,"To add DNS records, you will need to direcly edit the CoreDNS configuration file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="core/coredns/overlays/prod/configmap.yaml"',title:'"core/coredns/overlays/prod/configmap.yaml"'},"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: coredns\n  namespace: kube-system\n  labels:\n    k0s.k0sproject.io/stack: coredns\ndata:\n  Corefile: |\n    .:53 {\n      errors\n      health {\n        lameduck 5s\n      }\n      ready\n      kubernetes cluster.local in-addr.arpa ip6.arpa {\n        pods insecure\n        fallthrough in-addr.arpa ip6.arpa\n        ttl 30\n      }\n      prometheus :9153\n      forward . 8.8.8.8\n      cache 30\n      loop\n      reload\n      loadbalance\n      }\n      internal:53 {\n        log\n        errors\n        ready\n        hosts /etc/coredns/internal.db\n        reload\n      }\n\n  internal.db: |\n    <kubernetes node IP> my-app.internal\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="core/coredns/overlays/prod/deployment.yaml > spec > template > spec > volumes"',title:'"core/coredns/overlays/prod/deployment.yaml',">":!0,spec:!0,template:!0,'volumes"':!0},"        volumes:\n          - name: config-volume\n            configMap:\n              name: coredns\n              items:\n                - key: Corefile\n                  path: Corefile\n+               - key: internal.db\n+                 path: internal.db\n              defaultMode: 420\n")),(0,r.kt)("p",null,"You can test your configuration by using ",(0,r.kt)("inlineCode",{parentName:"p"},"dig"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# Use host DNS configuration\ndig my-app.internal\n# Explicit DNS server\ndig @<DNS IP> my-app.internal\n")),(0,r.kt)("h3",{id:"the-ipvlan-way"},"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"ipvlan")," way"),(0,r.kt)("p",null,"Using Multus, it is possible to attach an additional network interface to a pod. By using ipvlan like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="network-attachment-definition.yaml"',title:'"network-attachment-definition.yaml"'},'apiVersion: \'k8s.cni.cncf.io/v1\'\nkind: NetworkAttachmentDefinition\nmetadata:\n  name: my-net\n  namespace: namespace\nspec:\n  config: |\n    {\n      "cniVersion": "0.4.0",\n      "type": "ipvlan",\n      "master": "eth0",\n      "mode": "l2",\n      "ipam": {\n        "type": "static",\n        "addresses": [\n          "<address CIDR: 192.168.0.3/24>"\n        ]\n      }\n    }\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="pod.yaml"',title:'"pod.yaml"'},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp\n  labels:\n    name: myapp\n  annotations:\n    k8s.v1.cni.cncf.io/networks: 'namespace/my-net'\nspec:\n  containers:\n    - name: myapp\n      image: <Image>\n      resources:\n        limits:\n          memory: '128Mi'\n          cpu: '500m'\n      ports:\n        - containerPort: 80\n")),(0,r.kt)("p",null,"the pod is exposed using the attachment and has the IP 192.168.0.3. Pay attention to the routing! Currently the ",(0,r.kt)("inlineCode",{parentName:"p"},"192.168.0.0/24")," will go through the network interface, but everything else will go to the default Kubernetes network interface."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Scenario 4: I want to expose my Kubenetes pod to the local network without attaching to a specific node.")),(0,r.kt)("p",null,"To add DNS records, you will need to direcly edit the CoreDNS configuration file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="core/coredns/overlays/prod/configmap.yaml"',title:'"core/coredns/overlays/prod/configmap.yaml"'},"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: coredns\n  namespace: kube-system\n  labels:\n    k0s.k0sproject.io/stack: coredns\ndata:\n  Corefile: |\n    .:53 {\n      errors\n      health {\n        lameduck 5s\n      }\n      ready\n      kubernetes cluster.local in-addr.arpa ip6.arpa {\n        pods insecure\n        fallthrough in-addr.arpa ip6.arpa\n        ttl 30\n      }\n      prometheus :9153\n      forward . 8.8.8.8\n      cache 30\n      loop\n      reload\n      loadbalance\n      }\n      internal:53 {\n        log\n        errors\n        ready\n        hosts /etc/coredns/internal.db\n        reload\n      }\n\n  internal.db: |\n    <network attachment IP> my-app.internal\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="core/coredns/overlays/prod/deployment.yaml > spec > template > spec > volumes"',title:'"core/coredns/overlays/prod/deployment.yaml',">":!0,spec:!0,template:!0,'volumes"':!0},"        volumes:\n          - name: config-volume\n            configMap:\n              name: coredns\n              items:\n                - key: Corefile\n                  path: Corefile\n+               - key: internal.db\n+                 path: internal.db\n              defaultMode: 420\n")),(0,r.kt)("p",null,"You can test your configuration by using ",(0,r.kt)("inlineCode",{parentName:"p"},"dig"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# Use host DNS configuration\ndig my-app.internal\n# Explicit DNS server\ndig @<DNS IP> my-app.internal\n")))}m.isMDXComponent=!0}}]);