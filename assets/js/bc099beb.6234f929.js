"use strict";(self.webpackChunkcluster_factory_ce_docs=self.webpackChunkcluster_factory_ce_docs||[]).push([[1683],{9613:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(9496);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(r),m=a,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||i;return r?n.createElement(h,o(o({ref:t},p),{},{components:r})):n.createElement(h,o({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=r[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3127:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var n=r(665),a=(r(9496),r(9613));const i={},o="Grendel, the Bare-Metal Provisioner",s={unversionedId:"main-concepts/apps/grendel",id:"main-concepts/apps/grendel",title:"Grendel, the Bare-Metal Provisioner",description:"Grendel is a solution used to deploy and manage HPC (High Performance Computing) clusters. It is designed to automate the process of configuring and installing software on compute nodes using a custom DHCP, DNS, TFTP, and HTTP server written in Go.",source:"@site/docs/main-concepts/04-apps/07-grendel.mdx",sourceDirName:"main-concepts/04-apps",slug:"/main-concepts/apps/grendel",permalink:"/docs/main-concepts/apps/grendel",draft:!1,editUrl:"https://github.com/deepsquare-io/ClusterFactory/tree/main/web/docs/main-concepts/04-apps/07-grendel.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{},sidebar:"docs",previous:{title:"Sealed Secrets",permalink:"/docs/main-concepts/gitops/sealed-secrets"},next:{title:"SLURM, A Highly Scalable Workload Manager",permalink:"/docs/main-concepts/apps/slurm"}},l={},d=[{value:"Architecture",id:"architecture",level:2},{value:"Why Grendel ?",id:"why-grendel-",level:2},{value:"How does it work ?",id:"how-does-it-work-",level:2},{value:"OS Image Building",id:"os-image-building",level:3},{value:"Provisioning",id:"provisioning",level:3},{value:"Postscript",id:"postscript",level:3}],p={toc:d};function c(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"grendel-the-bare-metal-provisioner"},"Grendel, the Bare-Metal Provisioner"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/SquareFactory/grendel"},"Grendel")," is a solution used to deploy and manage HPC (High Performance Computing) clusters. It is designed to automate the process of configuring and installing software on compute nodes using a custom DHCP, DNS, TFTP, and HTTP server written in Go."),(0,a.kt)("h2",{id:"architecture"},"Architecture"),(0,a.kt)("p",null,"The architecture is the following:"),(0,a.kt)("div",{style:{textAlign:"center"}},(0,a.kt)("p",null,(0,a.kt)("img",{alt:"grendel-arch",src:r(1938).Z+"#invert-on-dark",width:"520",height:"259"}))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Grendel")," is deployed as a container and runs multiple network services responsible for the provisioning of bare-metal systems."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"The Service Processor (SP)")," controls the hardware and is used to perform out-of-band hardware control (e.g. Integrated Management Module (IMM), Flexible Service Processor (FSP), Baseboard Management Controller (BMC), etc)."),(0,a.kt)("p",null,"The Service Processor is connected to Grendel via ",(0,a.kt)("strong",{parentName:"p"},"the Service Network.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"The Management Network")," is used for OS provisioning (via PXE)."),(0,a.kt)("h2",{id:"why-grendel-"},"Why Grendel ?"),(0,a.kt)("p",null,"Our main criteria for choosing a bare metal provisioning solution is:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Operating system image management: provisioning methods, supported operating systems, ease of use."),(0,a.kt)("li",{parentName:"ul"},"BMC configuration (IPMI, ...)"),(0,a.kt)("li",{parentName:"ul"},"Configuration management (declarative, post-boot scripts, backups, ...)")),(0,a.kt)("p",null,"While a lot of solutions exist for bare-metal provisioning like ",(0,a.kt)("a",{parentName:"p",href:"https://wiki.openstack.org/wiki/Ironic"},"OpenStack Ironic")," or ",(0,a.kt)("a",{parentName:"p",href:"https://maas.io/"},"MAAS"),", only a few can do ",(0,a.kt)("strong",{parentName:"p"},"disk-less provisioning"),"."),(0,a.kt)("p",null,"Disk-less (or Stateless) provisioning is based on an OverlayFS root, with the OS being loaded from a SquashFS image. The OverlayFS is mounted as a ",(0,a.kt)("inlineCode",{parentName:"p"},"tmpfs"),", that is, in the RAM."),(0,a.kt)("div",{style:{textAlign:"center"}},(0,a.kt)("p",null,(0,a.kt)("img",{alt:"upper-lower",src:r(1807).Z+"#invert-on-dark",width:"513",height:"297"}))),(0,a.kt)("p",null,'Since the root is mounted in RAM, restarting a node will "clean it up", similar to a Docker container.'),(0,a.kt)("p",null,"With OverlayFS, we follow a proper DevOps practice where the architecture is immutable and mutable data is stored on disks."),(0,a.kt)("h2",{id:"how-does-it-work-"},"How does it work ?"),(0,a.kt)("h3",{id:"os-image-building"},"OS Image Building"),(0,a.kt)("p",null,"Grendel doesn't have an OS image builder. This is because we do not want the users to use a non-standard tool to build their OS images."),(0,a.kt)("p",null,"Instead, we prefer to use ",(0,a.kt)("a",{parentName:"p",href:"https://www.packer.io"},"Packer"),", mksquashfs and ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/dracutdevs/dracut"},"Dracut")," to automate the building of OS images, linux kernels and linux initramfs."),(0,a.kt)("p",null,"The steps to build disklessn OS image are the following:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Use Packer to build an image that includes the operating system and any additional packages or customizations you require. This image will serve as the base for the diskless OS."),(0,a.kt)("li",{parentName:"ol"},"Mount the OS image, chroot in the OS image and execute dracut to generate initramfs."),(0,a.kt)("li",{parentName:"ol"},"Extract the kernel and initramfs"),(0,a.kt)("li",{parentName:"ol"},"Use mksquashfs to create a squashfs filesystem image that will serve as the base layer of the overlayfs. The squashfs image should include any read-only files that will be shared across multiple diskless nodes.")),(0,a.kt)("h3",{id:"provisioning"},"Provisioning"),(0,a.kt)("p",null,"The steps to provision an OS image are the following:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Enable network boot on the BIOS of the nodes. This will cause the node to broadcast a DHCP request for an IP address and PXE server."),(0,a.kt)("li",{parentName:"ol"},"The Grendel DHCP server will respond with an IP address based on the node's MAC address, and send the Network Boot Program (NBP) - in this case, the iPXE firmware."),(0,a.kt)("li",{parentName:"ol"},"The iPXE firmware will then download the Linux kernel and initramfs."),(0,a.kt)("li",{parentName:"ol"},"The Linux kernel options ",(0,a.kt)("inlineCode",{parentName:"li"},"rd.live.*")," will be used to download the squashfs file from the Grendel server and mount the OS image as a /dev/loop device."),(0,a.kt)("li",{parentName:"ol"},"Once the base image is mounted, an overlayfs will be created using the loop device as the base image and an upper layer created using a tmpfs (RAM). This will provide a writeable layer for temporary files and system changes.")),(0,a.kt)("h3",{id:"postscript"},"Postscript"),(0,a.kt)("p",null,"After initializing the operating system image, a SystemD service can be utilized to retrieve the postscript file stored on the Grendel HTTP server and execute it."))}c.isMDXComponent=!0},1938:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/grendel.drawio-ebb317bdb751a6ca23b8de33547d525b.svg"},1807:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/overlayfs.drawio-5477db393dfbf84a86cf6ba1e4d59130.svg"}}]);