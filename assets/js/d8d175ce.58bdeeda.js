"use strict";(self.webpackChunkcluster_factory_ce_docs=self.webpackChunkcluster_factory_ce_docs||[]).push([[3715],{9613:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=s(n),d=o,g=u["".concat(c,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(g,i(i({ref:t},l),{},{components:n})):r.createElement(g,i({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1832:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var r=n(665),o=(n(9496),n(9613));const a={},i="Using ServiceMonitor to fetch metrics",p={unversionedId:"guides/monitoring/service-monitor",id:"guides/monitoring/service-monitor",title:"Using ServiceMonitor to fetch metrics",description:"Assuming that your application exports metrics on port 8080, the Deployment and Service may look like the following:",source:"@site/docs/guides/40-monitoring/02-service-monitor.md",sourceDirName:"guides/40-monitoring",slug:"/guides/monitoring/service-monitor",permalink:"/docs/guides/monitoring/service-monitor",draft:!1,editUrl:"https://github.com/SquareFactory/ClusterFactory/tree/main/web/docs/guides/40-monitoring/02-service-monitor.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"docs",previous:{title:"Deploy the Kube Prometheus Stack",permalink:"/docs/guides/monitoring/deploy"},next:{title:"How to deploy xCAT",permalink:"/docs/guides/provisioning/deploy-xcat"}},c={},s=[],l={toc:s};function m(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"using-servicemonitor-to-fetch-metrics"},"Using ",(0,o.kt)("inlineCode",{parentName:"h1"},"ServiceMonitor")," to fetch metrics"),(0,o.kt)("p",null,"Assuming that your application exports metrics on port ",(0,o.kt)("inlineCode",{parentName:"p"},"8080"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"Deployment")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Service")," may look like the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: example-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: example-app\n  template:\n    metadata:\n      labels:\n        app: example-app\n    spec:\n      containers:\n        - name: example-app\n          image: example-app\n          ports:\n            - name: web\n              containerPort: 8080\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: example-app\n  labels:\n    app: example-app\nspec:\n  selector:\n    app: example-app\n  ports:\n    - name: web\n      port: 8080\n")),(0,o.kt)("p",null,"Also assuming that the metrics are exposed on the path ",(0,o.kt)("inlineCode",{parentName:"p"},"/metrics"),", you would have to create a ",(0,o.kt)("inlineCode",{parentName:"p"},"ServiceMonitor")," that selects the right ",(0,o.kt)("inlineCode",{parentName:"p"},"Service")," with the correct ",(0,o.kt)("inlineCode",{parentName:"p"},"path"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: example-app\n  labels:\n    team: frontend\nspec:\n  selector:\n    matchLabels:\n      app: example-app\n  endpoints:\n    - port: web\n      path: /metrics\n")),(0,o.kt)("p",null,"By creating a ",(0,o.kt)("inlineCode",{parentName:"p"},"ServiceMonitor"),', the Prometheus Operator will automatically updates the Prometheus configuration to add a "scrape_config".'),(0,o.kt)("p",null,"You can see the targets added by the ",(0,o.kt)("inlineCode",{parentName:"p"},"ServiceMonitor")," on the Prometheus Dashboard."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image-20230110115616375",src:n(9211).Z,width:"1858",height:"210"})))}m.isMDXComponent=!0},9211:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image-20230110115616375-25329300eb3ffdd3c2eec1a231d95758.png"}}]);