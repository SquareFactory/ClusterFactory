"use strict";(self.webpackChunkcluster_factory_ce_docs=self.webpackChunkcluster_factory_ce_docs||[]).push([[2597],{7942:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(959);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),i=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=i(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=i(n),m=r,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(g,l(l({ref:t},u),{},{components:n})):a.createElement(g,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var i=2;i<o;i++)l[i]=n[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5314:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var a=n(665),r=(n(959),n(7942));const o={},l="Claiming a volume",s={unversionedId:"guides/storage/claiming-volume",id:"guides/storage/claiming-volume",title:"Claiming a volume",description:"What's great with Rook, is that the API integrates very well with Kubernetes.",source:"@site/docs/guides/90-storage/05-claiming-volume.md",sourceDirName:"guides/90-storage",slug:"/guides/storage/claiming-volume",permalink:"/docs/guides/storage/claiming-volume",draft:!1,editUrl:"https://github.com/deepsquare-io/ClusterFactory/tree/main/web/docs/guides/90-storage/05-claiming-volume.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"docs",previous:{title:"Deploying a Rook Cluster",permalink:"/docs/guides/storage/deploying-rook-cluster"},next:{title:"Deploy a LDAP server",permalink:"/docs/guides/deploy-ldap"}},c={},i=[{value:"Block Storage (RBD)",id:"block-storage-rbd",level:2},{value:"CephFS",id:"cephfs",level:2},{value:"Object storage",id:"object-storage",level:2}],u={toc:i};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"claiming-a-volume"},"Claiming a volume"),(0,r.kt)("p",null,"What's great with Rook, is that the API integrates very well with Kubernetes."),(0,r.kt)("h2",{id:"block-storage-rbd"},"Block Storage (RBD)"),(0,r.kt)("p",null,"If you successfully deployed an RBD pool, the storage class should be present."),(0,r.kt)("p",null,"Just claim a volume using a ",(0,r.kt)("inlineCode",{parentName:"p"},"PersistentVolumeClaim"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: my-data\nspec:\n  storageClassName: ceph-block\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n")),(0,r.kt)("h2",{id:"cephfs"},"CephFS"),(0,r.kt)("p",null,"If you successfully deployed a CephFS, the storage class should be present."),(0,r.kt)("p",null,"Just claim a volume using a ",(0,r.kt)("inlineCode",{parentName:"p"},"PersistentVolumeClaim"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: my-data\nspec:\n  storageClassName: ceph-filesystem\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 10Gi\n")),(0,r.kt)("h2",{id:"object-storage"},"Object storage"),(0,r.kt)("p",null,"If you successfully deployed an Object Store, the storage class should be present."),(0,r.kt)("p",null,"However, unlike the other, you need to claim a volume (bucket) using the ",(0,r.kt)("inlineCode",{parentName:"p"},"objectbucket.io/v1alpha1.ObjectBucketClaim")," CRD:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: objectbucket.io/v1alpha1\nkind: ObjectBucketClaim\nmetadata:\n  name: my-bucket\nspec:\n  generateBucketName: ceph-bkt\n  storageClassName: ceph-bucket\n")),(0,r.kt)("p",null,"If you set up the ",(0,r.kt)("inlineCode",{parentName:"p"},"ingress"),", you can access the bucket externally by fetching the values in the Secret, like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"echo AWS_HOST=<ingress address>\necho PORT=<ingress port>\necho BUCKET_NAME=$(kubectl -n default get cm my-bucket -o jsonpath='{.data.BUCKET_NAME}')\necho AWS_ACCESS_KEY_ID=$(kubectl -n default get secret my-bucket -o jsonpath='{.data.AWS_ACCESS_KEY_ID}' | base64 --decode)\necho AWS_SECRET_ACCESS_KEY=$(kubectl -n default get secret my-bucket -o jsonpath='{.data.AWS_SECRET_ACCESS_KEY}' | base64 --decode)\n\n")),(0,r.kt)("p",null,"which you can use with S5cmd. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"export AWS_HOST=objectstore.ceph-poc.internal\nexport PORT=80\nexport BUCKET_NAME=$(kubectl -n default get cm my-bucket -o jsonpath='{.data.BUCKET_NAME}')\nexport AWS_ACCESS_KEY_ID=$(kubectl -n default get secret my-bucket -o jsonpath='{.data.AWS_ACCESS_KEY_ID}' | base64 --decode)\nexport AWS_SECRET_ACCESS_KEY=$(kubectl -n default get secret my-bucket -o jsonpath='{.data.AWS_SECRET_ACCESS_KEY}' | base64 --decode)\n\ns5cmd --endpoint-url http://$AWS_HOST:$PORT cp test s3://\"$BUCKET_NAME\"\ns5cmd --endpoint-url http://$AWS_HOST:$PORT cp s3://\"$BUCKET_NAME\"/test /tmp/test\n")))}p.isMDXComponent=!0}}]);