"use strict";(self.webpackChunkcluster_factory_ce_docs=self.webpackChunkcluster_factory_ce_docs||[]).push([[4114],{9613:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var a=r(9496);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(r),d=n,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return r?a.createElement(g,i(i({ref:t},c),{},{components:r})):a.createElement(g,i({ref:t},c))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1515:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=r(665),n=(r(9496),r(9613));const o={},i="Storage Architecture",s={unversionedId:"guides/storage/storage-architecture",id:"guides/storage/storage-architecture",title:"Storage Architecture",description:"Rook Components on Kubernetes",source:"@site/docs/guides/90-storage/02-storage-architecture.md",sourceDirName:"guides/90-storage",slug:"/guides/storage/storage-architecture",permalink:"/docs/guides/storage/storage-architecture",draft:!1,editUrl:"https://github.com/deepsquare-io/ClusterFactory/tree/main/web/docs/guides/90-storage/02-storage-architecture.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/guides/storage/overview"},next:{title:"Deploying the Rook Operator",permalink:"/docs/guides/storage/deploying-rook"}},l={},p=[],c={toc:p};function u(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"storage-architecture"},"Storage Architecture"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Rook Components on Kubernetes",src:r(9562).Z,width:"1563",height:"1534"})),(0,n.kt)("p",null,"You can read more ",(0,n.kt)("a",{parentName:"p",href:"https://rook.io/docs/rook/latest/Getting-Started/storage-architecture/#shared-filesystem"},"here"),"."),(0,n.kt)("p",null,"Rook uses a distributed and modular storage architecture to provide robust storage solutions within Kubernetes:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Ceph OSD (Object Storage Daemon)"),":"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The Ceph OSD is a critical component in Rook's architecture. It manages the storage devices or partitions attached to each worker node in the cluster."),(0,n.kt)("li",{parentName:"ul"},"OSDs are responsible for data storage, replication, recovery, and balancing within the Ceph storage cluster."),(0,n.kt)("li",{parentName:"ul"},"Rook leverages Ceph OSDs to provide scalable and distributed storage resources to applications running in the Kubernetes cluster."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Ceph MON (Monitor)"),":"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The Ceph MON is responsible for maintaining the overall health and status of the Ceph storage cluster."),(0,n.kt)("li",{parentName:"ul"},"MONs store the cluster's metadata, monitor cluster membership changes, and participate in leader election."),(0,n.kt)("li",{parentName:"ul"},"Rook utilizes Ceph MONs to provide monitoring, management, and coordination for the Ceph storage cluster."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Ceph MGR (Manager)"),":"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The Ceph MGR acts as the central management and monitoring daemon within the Ceph storage cluster."),(0,n.kt)("li",{parentName:"ul"},"MGRs handle cluster-wide tasks, performance monitoring, and provide a RESTful API endpoint for external interactions."),(0,n.kt)("li",{parentName:"ul"},"Rook utilizes Ceph MGRs to facilitate management, monitoring, and control plane operations for the storage cluster."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Ceph MDS (Metadata Server)"),":"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The Ceph MDS is responsible for handling metadata operations in a Ceph file system (CephFS)."),(0,n.kt)("li",{parentName:"ul"},"MDS servers maintain file system metadata, handle file directory operations, and ensure data consistency."),(0,n.kt)("li",{parentName:"ul"},"Rook utilizes Ceph MDS to enable the deployment of scalable and distributed file systems within the Kubernetes cluster, offering features such as POSIX semantics and dynamic provisioning of file storage."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"CSI (Container Storage Interface)"),":"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Rook integrates with the Kubernetes CSI framework to provide storage orchestration and dynamic provisioning for persistent volumes."),(0,n.kt)("li",{parentName:"ul"},"The Rook CSI driver allows Kubernetes workloads to consume storage resources provisioned by Rook."),(0,n.kt)("li",{parentName:"ul"},"It enables seamless integration with various storage backends, allowing Rook to support different storage technologies, including Ceph, EdgeFS, NFS, and more."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Rook Operator"),":"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The Rook Operator is a Kubernetes operator responsible for managing the lifecycle of Rook storage components."),(0,n.kt)("li",{parentName:"ul"},"It handles the deployment, scaling, upgrading, and monitoring of the Rook storage cluster."),(0,n.kt)("li",{parentName:"ul"},"The Rook Operator ensures that the desired state of the storage cluster is maintained and handles automated tasks, such as creating OSDs and managing Ceph configuration.")))))}u.isMDXComponent=!0},9562:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/Rook-High-Level-Architecture-dfbe7c84d033828f47578f7dd76d76f3.png"}}]);