"use strict";(self.webpackChunkcluster_factory_ce_docs=self.webpackChunkcluster_factory_ce_docs||[]).push([[1944],{9613:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(9496);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=d(a),h=r,m=c["".concat(l,".").concat(h)]||c[h]||p[h]||s;return a?n.createElement(m,o(o({ref:t},u),{},{components:a})):n.createElement(m,o({ref:t},u))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var d=2;d<s;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},8284:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var n=a(665),r=(a(9496),a(9613));const s={},o="Setting up dashboards",i={unversionedId:"guides/setting-up-dashboards",id:"guides/setting-up-dashboards",title:"Setting up dashboards",description:"To set up a dashboard, you need to set up an Ingress Controller (like Traefik). After that, you can create either an IngressRoute or an Ingress. You also need to configure your DNS.",source:"@site/docs/guides/03-setting-up-dashboards.md",sourceDirName:"guides",slug:"/guides/setting-up-dashboards",permalink:"/docs/guides/setting-up-dashboards",draft:!1,editUrl:"https://github.com/SquareFactory/ClusterFactory/tree/main/web/docs/guides/03-setting-up-dashboards.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"docs",previous:{title:"Setting up CoreDNS",permalink:"/docs/guides/setting-up-coredns"},next:{title:"Creating a highly available cluster",permalink:"/docs/guides/maintenance/high-availability"}},l={},d=[{value:"Traefik Dashboard",id:"traefik-dashboard",level:2},{value:"ArgoCD Dashboard",id:"argocd-dashboard",level:2},{value:"Prometheus and Grafana dashboards",id:"prometheus-and-grafana-dashboards",level:2},{value:"Configure access to dashboard",id:"configure-access-to-dashboard",level:3},{value:"Adding new Grafana dashboards",id:"adding-new-grafana-dashboards",level:3},{value:"Adding the SLURM dashboard",id:"adding-the-slurm-dashboard",level:4},{value:"Adding the GPU dashboard",id:"adding-the-gpu-dashboard",level:4},{value:"Adding the node exporter dashboard",id:"adding-the-node-exporter-dashboard",level:4}],u={toc:d};function p(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"setting-up-dashboards"},"Setting up dashboards"),(0,r.kt)("p",null,"To set up a dashboard, you need to set up an Ingress Controller (like Traefik). After that, you can create either an ",(0,r.kt)("inlineCode",{parentName:"p"},"IngressRoute")," or an ",(0,r.kt)("inlineCode",{parentName:"p"},"Ingress"),". You also need to configure your DNS."),(0,r.kt)("p",null,"We will assume that you have followed the ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/requirements-recommendations"},"Getting Started")," and deployed Traefik as the main Ingress Controller."),(0,r.kt)("h2",{id:"traefik-dashboard"},"Traefik Dashboard"),(0,r.kt)("p",null,"Assuming you have configured the DNS to redirect ",(0,r.kt)("inlineCode",{parentName:"p"},"traefik.internal")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"192.168.1.100")," which is the entry point for the Load Balancer, the Traefik dashboard should be accessible by default based on the values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="core/traefik/values.yaml > ingressRoute"',title:'"core/traefik/values.yaml',">":!0,'ingressRoute"':!0},"ingressRoute:\n  dashboard:\n    enabled: true\n    # See your DNS configuration\n    matchRule: Host(`traefik.internal`)\n    entryPoints: ['traefik']\n\nports:\n  traefik:\n    port: 9000\n    expose: true\n    exposedPort: 9000\n    protocol: TCP\n")),(0,r.kt)("p",null,"You can connect to ",(0,r.kt)("a",{parentName:"p",href:"http://traefik.internal:9000/dashboard/"},"http://traefik.internal:9000/dashboard/")," (the trailing slash is important) to access the dashboard."),(0,r.kt)("h2",{id:"argocd-dashboard"},"ArgoCD Dashboard"),(0,r.kt)("p",null,"Assuming you have configured the DNS to redirect ",(0,r.kt)("inlineCode",{parentName:"p"},"argocd.internal")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"192.168.1.100")," which is the entry point for the Load Balancer, the ArgoCD dashboard should be accessible by default based on the ",(0,r.kt)("inlineCode",{parentName:"p"},"IngressRoute"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="core/argo-cd/ingress-route.yaml"',title:'"core/argo-cd/ingress-route.yaml"'},"apiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: argocd-server-https\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-server-https\n    app.kubernetes.io/component: ingress-route\nspec:\n  entryPoints:\n    - websecure\n  routes:\n    - kind: Rule\n      match: Host(`argocd.internal`)\n      priority: 10\n      services:\n        - name: argocd-server\n          port: 80\n    - kind: Rule\n      match: Host(`argocd.internal`) && HeadersRegexp(`Content-Type`, `^application/grpc.*$`)\n      priority: 11\n      services:\n        - name: argocd-server\n          port: 80\n          scheme: h2c\n  tls:\n    secretName: argocd.internal-secret\n")),(0,r.kt)("p",null,"And the certificate:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="core/argo-cd/certificate.yaml"',title:'"core/argo-cd/certificate.yaml"'},"apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: argocd.internal-cert\n  namespace: argocd\nspec:\n  secretName: argocd.internal-secret\n  issuerRef:\n    name: selfsigned-cluster-issuer\n    kind: ClusterIssuer\n  commonName: argocd.internal\n  duration: 43800h\n  subject:\n    countries: [CH]\n    localities: [Lonay]\n    organizationalUnits: []\n    organizations: [Example Org]\n    postalCodes: ['1027']\n    provinces: [Laud]\n    streetAddresses: [Chemin des Mouettes 1]\n  dnsNames:\n    - argocd.internal\n  emailAddresses:\n    - john.smith@example.com\n  privateKey:\n    size: 4096\n    algorithm: RSA\n")),(0,r.kt)("p",null,"You can connect to ",(0,r.kt)("a",{parentName:"p",href:"https://argocd.internal/"},"https://argocd.internal/")," to access the dashboard. It is also the address for the gRPC API."),(0,r.kt)("h2",{id:"prometheus-and-grafana-dashboards"},"Prometheus and Grafana dashboards"),(0,r.kt)("h3",{id:"configure-access-to-dashboard"},"Configure access to dashboard"),(0,r.kt)("p",null,"Assuming you have configured the DNS to redirect ",(0,r.kt)("inlineCode",{parentName:"p"},"prometheus.example.com")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"grafana.example.com")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"192.168.1.100")," which is the entry point for the Load Balancer, the Prometheus and Grafana dashboards should be accessible by default based on the values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="helm-subcharts/kube-prometheus-stack/values-example.yaml"',title:'"helm-subcharts/kube-prometheus-stack/values-example.yaml"'},"kube-prometheus-stack:\n  grafana:\n    enabled: true\n\n    ingress:\n      enabled: true\n      ingressClassName: traefik\n\n      annotations:\n        cert-manager.io/cluster-issuer: selfsigned-cluster-issuer\n        traefik.ingress.kubernetes.io/router.entrypoints: websecure\n        traefik.ingress.kubernetes.io/router.tls: 'true'\n\n      hosts:\n        - grafana.example.com\n\n      path: /\n\n      tls:\n        - secretName: grafana.example.com-secret\n          hosts:\n            - grafana.example.com\n\n  prometheus:\n    enabled: true\n\n    ingress:\n      enabled: true\n\n      annotations:\n        cert-manager.io/cluster-issuer: selfsigned-cluster-issuer\n        traefik.ingress.kubernetes.io/router.entrypoints: websecure\n        traefik.ingress.kubernetes.io/router.tls: 'true'\n\n      hosts:\n        - prometheus.example.com\n\n      paths:\n        - /\n\n      tls:\n        - secretName: prometheus.example.com-secret\n          hosts:\n            - prometheus.example.com\n")),(0,r.kt)("p",null,"You can connect to ",(0,r.kt)("a",{parentName:"p",href:"https://prometheus.example.com/"},"https://prometheus.example.com/")," or ",(0,r.kt)("a",{parentName:"p",href:"https://grafana.example.com/"},"https://grafana.example.com/"),"."),(0,r.kt)("h3",{id:"adding-new-grafana-dashboards"},"Adding new Grafana dashboards"),(0,r.kt)("h4",{id:"adding-the-slurm-dashboard"},"Adding the SLURM dashboard"),(0,r.kt)("p",null,"You can monitor form the login node."),(0,r.kt)("p",null,"Simply enable the ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceMonitor")," in the values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="helm/slurm-cluster/values-production.yaml"',title:'"helm/slurm-cluster/values-production.yaml"'},"login:\n  metrics:\n    enabled: true\n    gpuAccounting: true\n\n    ## You can customize the command to refresh the tls configs with:\n    ## command: ['sh', '-c', 'update-ca-trust && /init']\n    command: ['/init']\n\n    # Extra volume mounts (use login.volumes to add volumes)\n    volumeMounts: []\n\n    monitor:\n      enabled: true\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Commit and push the changes.")),(0,r.kt)("p",null,"You should be able to see the login nodes as targets on the Prometheus Dashboard:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image-20230110140546824",src:a(2120).Z,width:"1448",height:"274"})),(0,r.kt)("p",null,"The dashboard ID is 4323, and can be reviewed here: ",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/grafana/dashboards/4323-slurm-dashboard/"},"grafana.com/grafana/dashboards/4323-slurm-dashboard"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"grafana-dashboard",src:a(5338).Z,width:"2525",height:"1239"})),(0,r.kt)("p",null,"You can import the dashboard following this ",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/docs/grafana/latest/dashboards/manage-dashboards/"},"guide"),"."),(0,r.kt)("h4",{id:"adding-the-gpu-dashboard"},"Adding the GPU dashboard"),(0,r.kt)("p",null,"You can use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/utkuozdemir/nvidia_gpu_exporter"},"utkuozdemir/nvidia_gpu_exporter"),"."),(0,r.kt)("p",null,"You have to install the exporter on the compute nodes."),(0,r.kt)("p",null,"This is a working postscript that you can use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="install-gpu-exporter.sh"',title:'"install-gpu-exporter.sh"'},"#!/bin/sh\n\nuseradd -m -s /bin/bash prometheus || true\nmkdir -p /opt/prometheus/\n\ncurl -fsSL https://github.com/utkuozdemir/nvidia_gpu_exporter/releases/download/v1.1.0/nvidia_gpu_exporter_1.1.0_linux_x86_64.tar.gz | tar -xzvf - -C /opt/prometheus nvidia_gpu_exporter\n\n## Prometheus nvidia-gpu-exporter\ncat <<'EOF' > /etc/systemd/system/nvidia_gpu_exporter.service\n[Unit]\nDescription=Nvidia GPU Exporter\nWants=network-online.target\nAfter=network-online.target\n[Service]\nType=simple\nUser=prometheus\nExecStart=/opt/prometheus/nvidia_gpu_exporter\n[Install]\nWantedBy=multi-user.target\nEOF\n\n#systemctl daemon-reload\nsystemctl start --no-block nvidia_gpu_exporter\n")),(0,r.kt)("p",null,"After installing and starting the exporter, add a scrape config to the prometheus values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="helm-subcharts/kube-prometheus-stack/values-example.yaml"',title:'"helm-subcharts/kube-prometheus-stack/values-example.yaml"'},"kube-prometheus-stack:\n  prometheus:\n    prometheusSpec:\n      additionalScrapeConfigs:\n        - job_name: 'nvidia-gpu'\n          static_configs:\n            - targets:\n                - '10.10.2.51:9835'\n                - '10.10.2.52:9835'\n                - '10.10.2.53:9835'\n                - '10.10.2.54:9835'\n")),(0,r.kt)("p",null,"Commit and push the changes. You should be able to see the targets on the Prometheus Dashboard."),(0,r.kt)("p",null,"You can then import ",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/grafana/dashboards/14574-nvidia-gpu-metrics/"},"the dashboard"),"."),(0,r.kt)("h4",{id:"adding-the-node-exporter-dashboard"},"Adding the node exporter dashboard"),(0,r.kt)("p",null,"Grafana should already have dashboard configured for the nodes. You can also use the ",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/grafana/dashboards/1860-node-exporter-full/"},"Node Exporter Full"),"."),(0,r.kt)("p",null,"You have to install the node exporter on the compute nodes. The nodes on the Kubernetes Cluster have already a node exporter."),(0,r.kt)("p",null,"This is a postscript that you can use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="install-gpu-exporter.sh"',title:'"install-gpu-exporter.sh"'},"#!/bin/sh\n\nuseradd -m -s /bin/bash prometheus || true\nmkdir -p /opt/prometheus/\n\ncurl -fsSL https://github.com/prometheus/node_exporter/releases/download/v1.5.0/node_exporter-1.5.0.linux-amd64.tar.gz | tar -xzvf - --strip-components=1 -C /opt/prometheus node_exporter-1.5.0.linux-amd64/node_exporter\n\n## Prometheus nvidia-gpu-exporter\ncat <<'EOF' > /etc/systemd/system/node_exporter.service\n[Unit]\nDescription=Node Exporter\nWants=network-online.target\nAfter=network-online.target\n[Service]\nType=simple\nUser=prometheus\nExecStart=/opt/prometheus/node_exporter\n[Install]\nWantedBy=multi-user.target\nEOF\n\n#systemctl daemon-reload\nsystemctl start --no-block node_exporter\n")),(0,r.kt)("p",null,"After installing and starting the exporter, add a scrape config to the prometheus values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="helm-subcharts/kube-prometheus-stack/values-example.yaml"',title:'"helm-subcharts/kube-prometheus-stack/values-example.yaml"'},"kube-prometheus-stack:\n  prometheus:\n    prometheusSpec:\n      additionalScrapeConfigs:\n        - job_name: 'node-exporter'\n          static_configs:\n            - targets:\n                - '10.10.2.51:9100'\n                - '10.10.2.52:9100'\n                - '10.10.2.53:9100'\n                - '10.10.2.54:9100'\n")),(0,r.kt)("p",null,"Commit and push the changes. You should be able to see the targets on the Prometheus Dashboard."))}p.isMDXComponent=!0},2120:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/image-20230110140546824-45fe07c5812db2609c410c0975333698.png"},5338:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/image-e31ea771f6609fbcd9800080e35282bf.png"}}]);